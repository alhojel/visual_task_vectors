import os.path
from tqdm import trange
import rl_dataloader
from evaluate_detection.box_ops import to_rectangle
from evaluate_detection.canvas_ds import CanvasDataset
from reasoning_dataloader import *
import torchvision
from mae_utils import *
import argparse
from pathlib import Path
from segmentation_utils import *
import matplotlib.pyplot as plt
import numpy as np
from collections import defaultdict
import numpy as np
import os
from contextlib import ExitStack
import torch
import torchvision.transforms as T
from PIL import Image
import pickle
import torch.optim as optim
import torch.nn as nn
import random
from thop import profile



def get_args():
    parser = argparse.ArgumentParser('MAE pre-training', add_help=False)
    parser.add_argument('--model', default='mae_vit_large_patch16', type=str, metavar='MODEL',
                        help='Name of model to train')
    parser.add_argument('--output_dir', default='../output_dir/')
    parser.add_argument('--device', default='cuda',
                        help='device to use for training / testing')
    parser.add_argument('--base_dir', default='/home/ahojel/datasets/', help='pascal base dir')
    parser.add_argument('--seed', default=15, type=int)
    parser.add_argument('--t', default=[0, 0, 0], type=float, nargs='+')
    parser.add_argument('--ckpt', help='model checkpoint')
    parser.add_argument('--split', default=0 , type=int)
    parser.add_argument('--purple', default=0, type=int)
    parser.add_argument('--flip', default=0, type=int)
    parser.add_argument('--save_images', default=None, type=int, help='Save images')
    parser.add_argument('--query_support_list_file', default=None, type=str, help='Directory of query support list file')
    parser.add_argument('--train_images', default=100, type=int)
    parser.add_argument('--random_train_images', default=0, type=int)
    parser.add_argument('--eval_iters', default=1000, type=int)
    parser.add_argument('--store_latents', default=None, type=str, help='Where to store latents')
    parser.add_argument('--zero_shot', default=0, type=int)
    parser.add_argument('--task', default=None, type=int)
    parser.add_argument('--granularity', default=1, type=int)
    parser.add_argument('--k', default=8, type=int)
    parser.add_argument('--prob', default=0.3, type=float)
    parser.add_argument('--load_model', default=None, type=str, help='Where to load model from')

    return parser


class JointModel(nn.Module):
    def __init__(self, args, prompting_model, num_variables, train_ds, eval_ds, task_tensor, load_model=None):
        super().__init__()
        self.prompting_model = prompting_model
        self.num_variables = num_variables

        #segment 
        #self.bernoullis = [[22, 8, 1], [23, 8, 0], [22, 13, 0], [13, 4, 1], [27, 8, 2], [29, 2, 0], [30, 0, 1], [25, 13, 1], [29, 3, 1], [5, 9, 0], [29, 0, 2], [28, 10, 1], [10, 9, 1], [27, 14, 2], [22, 14, 0], [24, 14, 2], [5, 12, 1], [23, 3, 0], [30, 2, 0], [25, 14, 2], [22, 2, 1], [13, 7, 1], [23, 11, 1], [27, 1, 1], [27, 5, 1], [28, 15, 2], [21, 0, 0], [31, 14, 0], [13, 13, 1], [24, 10, 0], [21, 15, 0], [16, 13, 1], [30, 7, 1], [10, 3, 1], [28, 5, 0], [31, 13, 1], [26, 0, 2], [25, 6, 2], [25, 7, 1], [16, 15, 1], [22, 6, 0], [28, 6, 1], [29, 12, 1], [13, 1, 1], [24, 10, 2], [28, 4, 1], [23, 10, 0], [25, 10, 2], [28, 9, 0], [29, 14, 1], [22, 9, 1], [26, 2, 1], [23, 7, 1], [13, 14, 1], [3, 3, 1], [3, 4, 0], [31, 8, 0], [28, 13, 0], [27, 12, 1], [25, 13, 0], [25, 12, 2], [29, 2, 2], [22, 11, 1], [22, 0, 1], [24, 2, 0], [21, 7, 0], [26, 8, 1], [27, 11, 2], [25, 1, 1], [28, 9, 2], [25, 13, 2], [25, 3, 1], [0, 12, 0], [10, 15, 0], [28, 14, 0], [10, 12, 1], [23, 12, 1], [23, 1, 1], [5, 11, 1], [27, 5, 0], [21, 12, 1], [28, 0, 1], [28, 11, 1], [25, 2, 2], [22, 1, 1], [5, 15, 1], [0, 0, 1], [28, 1, 2], [31, 11, 0], [29, 10, 1], [22, 5, 1], [23, 14, 1], [0, 4, 1], [27, 4, 1], [0, 5, 0], [13, 15, 0], [30, 7, 0], [16, 2, 0], [27, 10, 1], [29, 12, 0], [5, 4, 0], [21, 15, 1], [31, 5, 1], [26, 3, 2], [10, 4, 1], [31, 13, 2], [25, 10, 1], [10, 8, 1], [25, 11, 2], [25, 12, 1], [29, 1, 2], [21, 8, 1], [29, 2, 1], [24, 14, 1], [16, 7, 1], [10, 6, 1], [24, 11, 2], [31, 7, 0], [26, 5, 1], [13, 7, 0], [3, 7, 0], [27, 0, 1], [24, 5, 1], [30, 3, 0], [28, 13, 1], [22, 3, 1], [13, 8, 1], [26, 7, 1], [0, 13, 1], [27, 13, 1], [3, 9, 0], [30, 1, 2], [30, 2, 1], [10, 12, 0], [26, 6, 2], [25, 1, 2], [16, 10, 1], [26, 10, 2], [26, 0, 1], [31, 9, 2], [22, 5, 0], [0, 15, 0], [30, 8, 1], [0, 4, 0], [24, 6, 1], [28, 6, 0], [5, 3, 1], [10, 13, 1], [28, 3, 1], [13, 9, 1], [24, 7, 2], [31, 3, 0], [28, 8, 0], [5, 5, 1], [26, 2, 0], [23, 7, 0], [27, 7, 1], [29, 10, 2], [31, 5, 0], [30, 4, 2], [25, 5, 2], [31, 4, 1], [27, 7, 2], [29, 3, 2], [3, 8, 0], [24, 15, 1], [23, 6, 1], [26, 10, 0], [10, 6, 0], [31, 11, 1], [28, 12, 1], [24, 0, 2], [23, 3, 1], [30, 6, 1], [31, 6, 1], [3, 1, 0], [23, 11, 0], [0, 1, 1], [30, 15, 0], [31, 15, 1], [29, 15, 2], [3, 1, 1], [22, 7, 1], [0, 11, 0], [21, 8, 0], [10, 7, 0], [16, 0, 0], [31, 8, 1], [28, 1, 1], [23, 12, 0], [31, 12, 1], [29, 0, 0], [0, 12, 1], [30, 0, 0], [31, 1, 1], [27, 0, 0], [3, 5, 0], [24, 13, 2], [5, 13, 0], [30, 1, 0], [29, 1, 0], [22, 1, 0], [31, 0, 1], [24, 11, 0], [0, 1, 0], [21, 14, 0], [25, 10, 0], [0, 2, 0], [25, 0, 0], [31, 0, 0], [28, 7, 0], [23, 0, 0], [0, 2, 1], [26, 1, 0], [10, 1, 0], [5, 6, 1], [30, 5, 0], [25, 1, 0], [31, 7, 1], [23, 2, 1], [22, 15, 0], [0, 15, 1], [26, 4, 0], [30, 13, 1], [25, 3, 0], [31, 2, 1], [27, 1, 0], [23, 1, 0], [22, 12, 0], [16, 9, 0], [31, 14, 1], [29, 13, 0], [23, 2, 0]]
        #self.setup = "segment_1shot"
        #lowlight 
        #self.bernoullis = [[16, 0, 1], [26, 14, 1], [3, 15, 1], [24, 1, 0], [28, 4, 2], [31, 3, 2], [29, 15, 0], [22, 13, 0], [3, 6, 1], [24, 3, 0], [27, 8, 2], [29, 2, 0], [16, 7, 0], [31, 5, 2], [10, 10, 0], [16, 11, 0], [27, 0, 0], [27, 11, 0], [21, 7, 1], [29, 11, 2], [23, 1, 0], [27, 15, 0], [28, 10, 1], [28, 0, 0], [24, 3, 2], [30, 14, 2], [5, 1, 1], [5, 12, 1], [23, 14, 0], [23, 11, 1], [21, 9, 0], [31, 1, 0], [26, 0, 0], [27, 2, 2], [10, 0, 0], [31, 6, 2], [29, 6, 2], [22, 4, 1], [30, 5, 1], [21, 10, 1], [31, 10, 2], [3, 9, 1], [16, 9, 1], [27, 4, 2], [25, 8, 0], [16, 13, 1], [0, 3, 0], [31, 12, 2], [26, 0, 2], [23, 4, 0], [27, 7, 0], [25, 6, 2], [25, 7, 1], [21, 3, 1], [26, 15, 2], [24, 6, 2], [10, 5, 1], [28, 6, 1], [31, 2, 0], [13, 1, 1], [5, 4, 1], [26, 1, 0], [24, 0, 1], [29, 9, 2], [5, 8, 1], [26, 5, 0], [30, 9, 0], [23, 10, 0], [31, 3, 1], [25, 10, 2], [31, 4, 0], [26, 2, 1], [13, 4, 0], [27, 8, 1], [0, 9, 0], [30, 11, 0], [3, 8, 0], [27, 12, 1], [25, 12, 2], [31, 2, 2], [28, 7, 2], [22, 11, 1], [5, 6, 0], [3, 5, 1], [21, 7, 0], [16, 5, 1], [22, 15, 1], [30, 9, 2], [31, 4, 2], [25, 1, 1], [27, 14, 1], [28, 9, 2], [0, 10, 0], [24, 4, 0], [30, 4, 0], [5, 1, 0], [5, 12, 0], [24, 8, 0], [25, 14, 1], [27, 13, 2], [30, 15, 2], [24, 2, 2], [30, 13, 2], [10, 12, 1], [10, 13, 0], [5, 0, 1], [27, 2, 1], [24, 7, 1], [28, 11, 1], [25, 2, 2], [22, 1, 1], [30, 5, 0], [30, 4, 2], [24, 4, 2], [31, 0, 0], [31, 11, 0], [26, 9, 1], [24, 8, 2], [27, 4, 1], [21, 1, 0], [3, 0, 0], [30, 7, 0], [5, 2, 0], [22, 7, 1], [16, 12, 1], [27, 7, 2], [16, 6, 0], [0, 6, 0], [24, 11, 0], [21, 2, 1], [31, 5, 1], [26, 14, 2], [5, 8, 0], [24, 15, 0], [25, 10, 1], [29, 14, 0], [30, 12, 1], [29, 15, 1], [23, 8, 1], [5, 10, 0], [25, 11, 2], [29, 12, 2], [25, 12, 1], [29, 2, 1], [16, 7, 1], [10, 10, 1], [13, 6, 1], [23, 10, 1], [5, 9, 1], [27, 1, 0], [28, 9, 1], [29, 14, 2], [30, 14, 0], [0, 9, 1], [16, 4, 1], [22, 3, 1], [13, 8, 1], [3, 8, 1], [27, 13, 1], [3, 9, 0], [25, 14, 0], [30, 1, 2], [16, 9, 0], [13, 13, 0], [16, 13, 0], [3, 10, 1], [25, 2, 1], [26, 0, 1], [26, 11, 1], [28, 2, 0], [29, 10, 0], [23, 0, 1], [0, 4, 0], [28, 6, 0], [29, 4, 2], [13, 1, 0], [28, 3, 1], [10, 13, 1], [29, 8, 2], [25, 8, 1], [29, 9, 1], [30, 7, 2], [10, 7, 0], [5, 5, 1], [28, 2, 2], [27, 8, 0], [21, 2, 0], [31, 5, 0], [25, 11, 1], [27, 9, 2], [3, 7, 1], [24, 11, 1], [0, 0, 1], [13, 12, 1], [21, 6, 1], [10, 0, 1], [16, 6, 1], [5, 2, 1], [30, 13, 1], [25, 4, 1], [31, 8, 2], [27, 11, 1], [29, 13, 1], [3, 7, 0], [0, 1, 0], [26, 3, 0], [21, 3, 0], [5, 14, 0], [30, 9, 1], [25, 0, 0], [31, 13, 1], [29, 5, 1], [22, 3, 0], [26, 14, 0], [30, 15, 1], [25, 3, 0], [31, 8, 1], [27, 6, 0], [29, 0, 0], [13, 0, 1], [5, 3, 0], [30, 1, 1], [31, 7, 1], [29, 7, 1], [3, 11, 1], [23, 6, 1], [21, 11, 0], [10, 8, 0], [5, 6, 1], [30, 8, 1], [10, 3, 0], [5, 13, 0], [30, 0, 0], [28, 8, 0], [29, 13, 0], [30, 12, 0], [27, 14, 0], [31, 13, 0], [10, 14, 0], [28, 13, 0], [27, 3, 0], [0, 1, 1], [30, 1, 0], [16, 15, 0], [25, 1, 0], [31, 15, 0], [0, 2, 1], [25, 12, 0], [31, 8, 0], [29, 9, 0], [13, 6, 0], [21, 4, 0], [31, 7, 0], [29, 1, 0], [0, 2, 0], [10, 1, 0], [30, 13, 0], [0, 11, 0]]
        #self.setup = "lowlight_1shot"
        #inpaint self.bernoullis = [[16, 0, 1], [22, 10, 1], [26, 14, 1], [27, 6, 2], [3, 5, 0], [3, 2, 1], [31, 3, 2], [30, 12, 0], [21, 4, 0], [23, 8, 0], [22, 13, 0], [24, 3, 0], [25, 9, 1], [29, 2, 0], [16, 6, 1], [16, 7, 0], [29, 3, 1], [16, 11, 0], [30, 15, 1], [27, 0, 0], [24, 5, 0], [29, 15, 2], [28, 0, 0], [22, 3, 0], [24, 14, 2], [25, 0, 0], [31, 10, 0], [27, 3, 1], [10, 11, 1], [28, 12, 1], [25, 14, 2], [13, 7, 1], [23, 11, 1], [21, 9, 0], [31, 12, 0], [21, 13, 0], [3, 12, 0], [29, 7, 0], [16, 1, 0], [30, 5, 1], [28, 15, 2], [16, 9, 1], [26, 12, 1], [3, 13, 1], [3, 14, 0], [16, 13, 1], [31, 13, 1], [5, 2, 1], [26, 0, 2], [21, 3, 1], [28, 2, 1], [27, 10, 2], [31, 2, 0], [28, 7, 0], [13, 1, 1], [13, 2, 0], [26, 1, 0], [29, 9, 2], [23, 10, 0], [10, 7, 1], [31, 4, 0], [25, 10, 2], [26, 13, 1], [23, 7, 1], [31, 8, 0], [28, 13, 0], [26, 7, 0], [27, 12, 1], [31, 2, 2], [25, 12, 2], [28, 7, 2], [22, 0, 1], [5, 6, 0], [30, 1, 1], [10, 9, 0], [25, 4, 0], [22, 13, 1], [30, 3, 1], [30, 14, 1], [24, 4, 0], [0, 10, 0], [5, 12, 0], [5, 1, 0], [25, 13, 2], [16, 11, 1], [22, 2, 0], [24, 2, 2], [0, 12, 0], [0, 1, 0], [10, 12, 1], [10, 15, 0], [29, 8, 1], [5, 11, 1], [5, 0, 1], [23, 1, 1], [21, 12, 1], [25, 2, 2], [29, 5, 2], [22, 1, 1], [22, 4, 0], [24, 4, 2], [0, 0, 1], [28, 1, 2], [31, 11, 0], [30, 4, 2], [22, 5, 1], [26, 9, 1], [23, 14, 1], [27, 3, 2], [0, 15, 1], [21, 1, 0], [25, 5, 0], [31, 15, 0], [26, 3, 0], [13, 15, 0], [24, 13, 1], [31, 12, 1], [5, 2, 0], [22, 8, 0], [3, 2, 0], [21, 14, 0], [16, 12, 1], [16, 2, 0], [30, 6, 1], [0, 2, 0], [3, 6, 0], [31, 11, 2], [5, 4, 0], [0, 6, 0], [3, 14, 1], [31, 15, 2], [31, 5, 1], [26, 3, 2], [27, 9, 2], [31, 13, 2], [25, 10, 1], [0, 8, 0], [23, 8, 1], [31, 2, 1], [10, 6, 1], [24, 14, 1], [24, 3, 1], [27, 12, 0], [29, 2, 1], [21, 8, 1], [22, 0, 0], [30, 1, 0], [24, 11, 2], [30, 11, 2], [10, 11, 0], [28, 12, 0], [22, 15, 0], [24, 15, 2], [27, 0, 1], [24, 5, 1], [27, 1, 0], [0, 11, 1], [23, 15, 0], [0, 9, 1], [27, 15, 1], [28, 13, 1], [31, 9, 0], [16, 4, 1], [13, 8, 1], [21, 10, 0], [25, 3, 0], [29, 4, 0], [30, 1, 2], [16, 9, 0], [30, 2, 1], [10, 1, 0], [23, 12, 0], [26, 6, 2], [27, 1, 2], [22, 1, 0], [26, 10, 2], [10, 14, 0], [31, 9, 2], [25, 7, 0], [30, 8, 1], [0, 4, 0], [21, 0, 1], [23, 5, 0], [10, 2, 1], [28, 3, 1], [24, 13, 0], [25, 5, 2], [29, 9, 1], [30, 7, 2], [24, 7, 2], [29, 13, 1], [5, 5, 1], [23, 6, 1], [26, 13, 0], [0, 5, 1], [28, 6, 2], [25, 12, 1], [29, 0, 1], [3, 3, 1], [24, 0, 1], [23, 2, 0], [22, 5, 0], [0, 15, 0], [21, 0, 0], [10, 7, 0], [16, 1, 1], [5, 10, 1], [25, 2, 0], [28, 4, 0], [3, 9, 0], [23, 4, 1], [26, 15, 0], [21, 10, 1], [25, 12, 0], [31, 0, 0], [3, 11, 0], [24, 12, 0], [0, 1, 1], [16, 3, 0], [30, 6, 0], [31, 14, 0], [0, 2, 1], [26, 11, 0], [10, 2, 0], [16, 15, 0], [31, 6, 0], [28, 11, 0]]
        #self.setup = "inpaint_1shot"
        #colorization
        #self.bernoullis =[[22, 10, 1], [26, 14, 1], [26, 1, 1], [27, 9, 1], [29, 0, 0], [22, 8, 1], [16, 5, 0], [3, 2, 1], [10, 8, 0], [28, 8, 2], [29, 15, 0], [23, 8, 0], [13, 4, 1], [3, 6, 1], [24, 3, 0], [0, 7, 0], [24, 1, 2], [30, 15, 1], [27, 11, 0], [24, 5, 0], [26, 8, 2], [23, 1, 0], [27, 15, 0], [29, 15, 2], [28, 11, 0], [22, 14, 0], [30, 3, 2], [24, 14, 2], [0, 0, 0], [31, 10, 0], [28, 15, 0], [30, 2, 0], [23, 3, 0], [24, 8, 1], [31, 7, 1], [25, 14, 2], [27, 3, 1], [13, 7, 1], [23, 11, 1], [0, 1, 1], [21, 9, 0], [24, 5, 2], [31, 1, 0], [31, 12, 0], [0, 12, 1], [25, 6, 0], [29, 7, 0], [30, 8, 0], [31, 10, 2], [21, 10, 1], [31, 14, 0], [5, 3, 0], [3, 13, 1], [16, 13, 1], [10, 3, 1], [26, 0, 2], [28, 2, 1], [29, 7, 2], [22, 6, 0], [30, 6, 2], [10, 5, 1], [31, 2, 0], [13, 1, 1], [5, 4, 1], [13, 2, 0], [3, 15, 0], [5, 8, 1], [30, 9, 0], [23, 10, 0], [28, 8, 1], [25, 10, 2], [29, 13, 2], [0, 8, 1], [24, 12, 2], [0, 9, 0], [30, 11, 0], [27, 12, 1], [22, 11, 1], [22, 0, 1], [30, 1, 1], [24, 2, 0], [27, 0, 2], [27, 11, 2], [25, 2, 0], [29, 5, 0], [22, 13, 1], [24, 4, 0], [28, 1, 0], [27, 3, 0], [27, 13, 2], [24, 8, 0], [29, 3, 2], [25, 3, 1], [25, 0, 2], [3, 11, 1], [24, 2, 2], [0, 12, 0], [10, 12, 1], [10, 15, 0], [10, 13, 0], [10, 2, 0], [29, 8, 1], [28, 14, 0], [23, 1, 1], [5, 14, 0], [25, 2, 2], [22, 1, 1], [30, 5, 0], [30, 4, 2], [28, 1, 2], [22, 5, 1], [26, 9, 1], [23, 14, 1], [24, 8, 2], [3, 11, 0], [3, 0, 0], [27, 4, 1], [31, 12, 1], [24, 13, 1], [31, 13, 0], [13, 12, 1], [22, 8, 0], [26, 15, 1], [30, 6, 1], [27, 7, 2], [31, 0, 2], [5, 4, 0], [21, 15, 1], [31, 15, 2], [26, 3, 2], [24, 1, 1], [25, 10, 1], [29, 14, 0], [22, 9, 0], [23, 4, 1], [30, 12, 1], [0, 8, 0], [21, 4, 1], [29, 15, 1], [23, 8, 1], [21, 8, 1], [25, 11, 2], [29, 1, 2], [24, 14, 1], [25, 12, 1], [22, 11, 0], [30, 1, 0], [24, 11, 2], [24, 0, 2], [31, 7, 0], [13, 7, 0], [0, 11, 1], [27, 0, 1], [25, 1, 0], [27, 1, 0], [29, 14, 2], [26, 10, 0], [21, 5, 1], [0, 9, 1], [30, 14, 0], [31, 6, 1], [25, 4, 2], [23, 15, 0], [16, 4, 1], [3, 8, 1], [3, 9, 0], [25, 0, 1], [27, 13, 1], [29, 4, 0], [31, 7, 2], [29, 8, 0], [5, 11, 0], [24, 7, 0], [31, 1, 1], [29, 6, 0], [22, 1, 0], [26, 10, 2], [26, 0, 1], [10, 14, 0], [29, 10, 0], [0, 4, 0], [24, 9, 0], [26, 12, 2], [28, 3, 1], [25, 5, 2], [22, 7, 0], [24, 7, 2], [30, 7, 2], [0, 3, 1], [13, 14, 0], [30, 6, 0], [28, 2, 2], [27, 8, 0], [29, 10, 2], [30, 10, 0], [31, 15, 1], [31, 5, 0], [30, 1, 2], [25, 4, 1], [31, 2, 2], [28, 5, 2], [27, 4, 2], [24, 10, 1], [22, 13, 0], [0, 5, 0], [26, 2, 2], [13, 6, 1], [21, 2, 1], [10, 2, 1], [5, 0, 1], [30, 9, 1], [27, 8, 2], [29, 6, 1], [3, 5, 0], [24, 13, 2], [23, 7, 1], [22, 12, 1], [26, 5, 0], [13, 11, 0], [10, 1, 0], [16, 8, 0], [31, 4, 2], [27, 9, 0], [29, 13, 1], [24, 9, 1], [23, 2, 1], [22, 6, 1], [0, 10, 0], [26, 2, 0], [13, 3, 1], [25, 0, 0], [31, 0, 1], [29, 12, 0], [3, 2, 0], [24, 0, 0], [23, 0, 0], [22, 0, 0], [0, 7, 1]]
        #self.setup = "color_1shot"
        #
        #self.bernoullis = [[16, 0, 1], [22, 10, 1], [26, 14, 1], [26, 3, 1], [3, 15, 1], [24, 1, 0], [27, 9, 1], [25, 10, 0], [10, 4, 0], [27, 6, 2], [29, 11, 0], [8, 3, 1], [22, 8, 1], [16, 5, 0], [21, 4, 0], [31, 4, 1], [28, 8, 2], [23, 8, 0], [26, 2, 2], [22, 13, 0], [3, 6, 1], [24, 14, 0], [25, 9, 1], [24, 3, 0], [27, 8, 2], [16, 6, 1], [30, 0, 1], [10, 10, 0], [24, 1, 2], [24, 5, 0], [23, 1, 0], [28, 10, 1], [28, 11, 0], [31, 6, 0], [25, 4, 1], [10, 9, 1], [23, 9, 1], [0, 10, 1], [30, 3, 2], [25, 0, 0], [0, 0, 0], [0, 13, 0], [28, 15, 0], [24, 14, 2], [23, 14, 0], [27, 3, 1], [30, 13, 0], [30, 2, 0], [23, 3, 0], [25, 3, 2], [25, 14, 2], [23, 11, 1], [24, 5, 2], [0, 1, 1], [31, 1, 0], [5, 14, 1], [26, 0, 0], [31, 6, 2], [28, 0, 2], [3, 1, 0], [3, 12, 0], [29, 7, 0], [16, 1, 0], [30, 5, 1], [3, 9, 1], [30, 8, 0], [0, 14, 1], [24, 6, 0], [26, 9, 2], [26, 12, 1], [3, 13, 1], [24, 10, 0], [25, 5, 1], [3, 14, 0], [27, 4, 2], [25, 8, 0], [16, 13, 1], [0, 3, 0], [10, 3, 1], [28, 5, 0], [29, 13, 0], [26, 0, 2], [23, 4, 0], [5, 5, 0], [27, 7, 0], [24, 12, 0], [25, 7, 1], [28, 2, 1], [10, 5, 1], [31, 2, 0], [31, 14, 2], [27, 10, 2], [29, 1, 1], [13, 1, 1], [3, 15, 0], [24, 10, 2], [24, 0, 1], [29, 9, 2], [25, 10, 2], [10, 7, 1], [28, 9, 0], [29, 14, 1], [22, 12, 0], [13, 3, 1], [24, 12, 2], [27, 8, 1], [25, 9, 0], [21, 5, 0], [31, 8, 0], [30, 11, 0], [31, 2, 2], [25, 12, 2], [29, 2, 2], [26, 1, 2], [6, 0, 1], [3, 5, 1], [21, 7, 0], [22, 15, 1], [27, 0, 2], [10, 9, 0], [3, 10, 0], [25, 2, 0], [27, 14, 1], [25, 1, 1], [28, 1, 0], [31, 9, 1], [24, 4, 0], [26, 7, 2], [25, 0, 2], [25, 3, 1], [22, 2, 0], [16, 11, 1], [30, 15, 2], [30, 2, 2], [30, 13, 2], [10, 1, 1], [10, 12, 1], [5, 11, 1], [23, 12, 1], [23, 2, 0], [27, 2, 1], [27, 5, 0], [21, 12, 1], [5, 14, 0], [25, 2, 2], [5, 15, 1], [23, 6, 0], [30, 4, 2], [28, 1, 2], [10, 14, 1], [0, 0, 1], [24, 4, 2], [22, 5, 1], [5, 13, 1], [13, 0, 0], [24, 8, 2], [3, 0, 0], [8, 9, 1], [16, 0, 0], [30, 7, 0], [31, 12, 1], [25, 8, 2], [28, 14, 2], [13, 12, 1], [22, 8, 0], [3, 12, 1], [3, 2, 0], [21, 3, 0], [16, 12, 1], [30, 5, 2], [27, 10, 1], [3, 6, 0], [31, 11, 2], [10, 5, 0], [30, 10, 1], [24, 0, 0], [21, 2, 1], [24, 11, 0], [26, 3, 2], [5, 8, 0], [24, 1, 1], [27, 9, 2], [25, 10, 1], [23, 4, 1], [30, 12, 1], [10, 8, 1], [28, 10, 0], [5, 7, 1], [13, 5, 0], [5, 10, 0], [24, 14, 1], [25, 9, 2], [24, 3, 1], [21, 8, 1], [31, 2, 1], [22, 0, 0], [30, 0, 2], [24, 11, 2], [31, 7, 0], [28, 12, 0], [10, 11, 0], [22, 15, 0], [23, 10, 1], [13, 7, 0], [5, 9, 1], [27, 11, 1], [28, 9, 1], [24, 15, 2], [30, 14, 0], [23, 15, 0], [28, 10, 2], [31, 8, 1], [21, 5, 1], [26, 7, 1], [0, 13, 1], [21, 10, 0], [0, 14, 0], [25, 14, 0], [25, 3, 0], [30, 1, 2], [13, 13, 0], [26, 12, 0], [30, 2, 1], [10, 1, 0], [5, 11, 0], [16, 13, 0], [27, 2, 0], [24, 7, 0], [3, 10, 1], [31, 1, 1], [21, 11, 1], [21, 12, 0], [25, 1, 2], [22, 1, 0], [26, 10, 2], [25, 2, 1], [26, 0, 1], [28, 2, 0], [28, 1, 1], [22, 5, 0], [0, 4, 0], [24, 9, 0], [29, 4, 2], [13, 1, 0], [24, 10, 1], [10, 2, 1], [28, 3, 1], [28, 4, 0], [29, 9, 1], [24, 7, 2], [30, 7, 2], [31, 3, 0], [28, 8, 0], [29, 13, 1], [13, 14, 0], [23, 7, 0], [3, 3, 0], [28, 2, 2], [24, 12, 1], [3, 0, 1], [31, 15, 1], [30, 9, 2], [27, 1, 2], [29, 8, 2], [3, 8, 1], [24, 3, 2], [0, 5, 0], [26, 14, 2], [13, 6, 1], [5, 6, 0], [27, 14, 2], [29, 12, 2], [24, 11, 1], [23, 0, 0], [22, 11, 1], [26, 13, 0], [13, 12, 0], [30, 15, 1], [29, 0, 2], [22, 0, 1], [0, 2, 0], [13, 15, 0], [21, 2, 0], [10, 0, 1], [16, 1, 1], [30, 11, 2], [25, 11, 1], [3, 4, 1], [24, 5, 1], [23, 12, 0], [22, 4, 0], [0, 2, 1], [26, 11, 0], [16, 4, 0], [30, 13, 1], [25, 7, 0], [31, 7, 1], [28, 6, 0], [29, 10, 0], [23, 9, 0], [0, 12, 0], [26, 9, 0], [30, 15, 0], [25, 6, 0], [27, 9, 0]]
        #self.bernoullis =  [[layer, head, quadrant] for head in range(0,16) for quadrant in [0,1] for layer in range(0,24)] + [[layer, head, quadrant] for head in range(0,16) for quadrant in [0,1,2] for layer in range(24,32)]
        #random.shuffle(self.bernoullis)
        #self.bernoullis = self.bernoullis[:240]

        #self.bernoullis = [[25, 2, 8], [25, 2, 9], [25, 2, 10], [25, 2, 11], [25, 2, 12], [25, 2, 13], [25, 2, 14], [25, 2, 22], [25, 2, 23], [25, 2, 24], [25, 2, 25], [25, 2, 26], [25, 2, 27], [25, 2, 28], [25, 2, 36], [25, 2, 37], [25, 2, 38], [25, 2, 39], [25, 2, 40], [25, 2, 41], [25, 2, 42], [25, 2, 50], [25, 2, 51], [25, 2, 52], [25, 2, 53], [25, 2, 54], [25, 2, 55], [25, 2, 56], [25, 2, 64], [25, 2, 65], [25, 2, 66], [25, 2, 67], [25, 2, 68], [25, 2, 69], [25, 2, 70], [25, 2, 78], [25, 2, 79], [25, 2, 80], [25, 2, 81], [25, 2, 82], [25, 2, 83], [25, 2, 84], [25, 2, 92], [25, 2, 93], [25, 2, 94], [25, 2, 95], [25, 2, 96], [25, 2, 97], [25, 2, 98], [28, 15, 0], [25, 2, 99], [25, 2, 100], [25, 2, 101], [25, 2, 102], [25, 2, 103], [25, 2, 104], [25, 2, 105], [25, 2, 106], [25, 2, 107], [25, 2, 108], [25, 2, 109], [25, 2, 110], [25, 2, 111], [25, 2, 112], [25, 2, 113], [25, 2, 114], [25, 2, 115], [25, 2, 116], [25, 2, 117], [25, 2, 118], [25, 2, 119], [25, 2, 120], [25, 2, 121], [25, 2, 122], [25, 2, 123], [25, 2, 124], [25, 2, 125], [25, 2, 126], [25, 2, 127], [25, 2, 128], [25, 2, 129], [25, 2, 130], [25, 2, 131], [25, 2, 132], [25, 2, 133], [25, 2, 134], [25, 2, 135], [25, 2, 136], [25, 2, 137], [25, 2, 138], [25, 2, 139], [25, 2, 140], [25, 2, 141], [25, 2, 142], [25, 2, 143], [25, 2, 144], [25, 2, 145], [25, 2, 146], [25, 2, 147], [25, 2, 148], [25, 2, 149], [25, 2, 150], [25, 2, 151], [25, 2, 152], [25, 2, 153], [25, 2, 154], [25, 2, 155], [25, 2, 156], [25, 2, 157], [25, 2, 158], [25, 2, 159], [25, 2, 160], [25, 2, 161], [25, 2, 162], [25, 2, 163], [25, 2, 164], [25, 2, 165], [25, 2, 166], [25, 2, 167], [25, 2, 168], [25, 2, 169], [25, 2, 170], [25, 2, 171], [25, 2, 172], [25, 2, 173], [25, 2, 174], [25, 2, 175], [25, 2, 176], [25, 2, 177], [25, 2, 178], [25, 2, 179], [25, 2, 180], [25, 2, 181], [25, 2, 182], [25, 2, 183], [25, 2, 184], [25, 2, 185], [25, 2, 186], [25, 2, 187], [25, 2, 188], [25, 2, 189], [25, 2, 190], [25, 2, 191], [25, 2, 192], [25, 2, 193], [25, 2, 194], [25, 2, 195], [25, 2, 196], [23, 13, 0], [30, 11, 0], [26, 7, 8], [26, 7, 9], [26, 7, 10], [26, 7, 11], [26, 7, 12], [26, 7, 13], [26, 7, 14], [26, 7, 22], [26, 7, 23], [26, 7, 24], [26, 7, 25], [26, 7, 26], [26, 7, 27], [26, 7, 28], [26, 7, 36], [26, 7, 37], [26, 7, 38], [26, 7, 39], [26, 7, 40], [26, 7, 41], [26, 7, 42], [26, 7, 50], [26, 7, 51], [26, 7, 52], [26, 7, 53], [26, 7, 54], [26, 7, 55], [26, 7, 56], [26, 7, 64], [26, 7, 65], [26, 7, 66], [26, 7, 67], [26, 7, 68], [26, 7, 69], [26, 7, 70], [26, 7, 78], [26, 7, 79], [26, 7, 80], [26, 7, 81], [26, 7, 82], [26, 7, 83], [26, 7, 84], [26, 7, 92], [26, 7, 93], [26, 7, 94], [26, 7, 95], [26, 7, 96], [26, 7, 97], [26, 7, 98], [27, 9, 0], [5, 4, 0], [25, 2, 0], [25, 2, 1], [25, 2, 2], [25, 2, 3], [25, 2, 4], [25, 2, 5], [25, 2, 6], [25, 2, 7], [25, 2, 15], [25, 2, 16], [25, 2, 17], [25, 2, 18], [25, 2, 19], [25, 2, 20], [25, 2, 21], [25, 2, 29], [25, 2, 30], [25, 2, 31], [25, 2, 32], [25, 2, 33], [25, 2, 34], [25, 2, 35], [25, 2, 43], [25, 2, 44], [25, 2, 45], [25, 2, 46], [25, 2, 47], [25, 2, 48], [25, 2, 49], [25, 2, 57], [25, 2, 58], [25, 2, 59], [25, 2, 60], [25, 2, 61], [25, 2, 62], [25, 2, 63], [25, 2, 71], [25, 2, 72], [25, 2, 73]]

        # randoml seg self.bernoullis = [[16, 0, 1], [13, 15, 1], [6, 0, 0], [7, 9, 0], [16, 5, 0], [10, 8, 0], [29, 15, 0], [2, 12, 0], [13, 4, 1], [6, 2, 0], [24, 14, 0], [30, 11, 1], [30, 0, 1], [1, 5, 0], [2, 0, 1], [6, 1, 1], [29, 0, 2], [2, 15, 1], [17, 1, 0], [25, 4, 1], [13, 5, 1], [24, 3, 2], [14, 4, 1], [23, 14, 0], [30, 2, 0], [6, 7, 1], [30, 13, 0], [18, 12, 1], [18, 1, 1], [10, 15, 1], [8, 13, 0], [23, 15, 1], [17, 2, 1], [18, 14, 1], [8, 11, 0], [16, 1, 0], [2, 4, 0], [30, 5, 1], [30, 8, 0], [13, 13, 1], [6, 8, 1], [13, 0, 1], [24, 10, 0], [7, 4, 1], [18, 3, 0], [29, 9, 0], [16, 13, 1], [16, 3, 0], [17, 8, 1], [10, 3, 1], [15, 2, 1], [2, 7, 1], [15, 7, 0], [29, 1, 1], [24, 10, 2], [14, 0, 1], [14, 14, 0], [2, 13, 1], [23, 10, 0], [17, 10, 0], [25, 10, 2], [1, 13, 1], [23, 7, 1], [1, 2, 1], [13, 3, 1], [25, 9, 0], [17, 9, 1], [17, 12, 0], [25, 12, 2], [29, 2, 2], [17, 13, 1], [6, 0, 1], [24, 2, 0], [7, 11, 1], [25, 4, 0], [25, 1, 1], [16, 10, 0], [30, 3, 1], [17, 15, 1], [30, 4, 0], [24, 4, 0], [2, 14, 1], [23, 0, 0], [6, 4, 1], [25, 3, 1], [18, 12, 0], [1, 5, 1], [15, 3, 0], [30, 15, 2], [30, 2, 2], [7, 6, 1], [10, 2, 0], [29, 8, 1], [23, 12, 1], [2, 5, 1], [24, 7, 1], [25, 2, 2], [18, 0, 1], [17, 6, 0], [30, 5, 0], [23, 6, 0], [10, 14, 1], [18, 15, 1], [1, 9, 1], [23, 3, 1], [24, 8, 2], [30, 8, 2], [13, 15, 0], [17, 5, 1], [10, 3, 0], [8, 13, 1], [8, 14, 0], [2, 7, 0], [13, 12, 1], [16, 12, 1], [16, 2, 0], [30, 5, 2], [17, 7, 1], [30, 6, 1], [25, 11, 0], [10, 5, 0], [8, 15, 1], [29, 1, 0], [1, 0, 0], [15, 6, 0], [2, 10, 1], [24, 15, 0], [25, 10, 1], [6, 3, 0], [29, 11, 1], [1, 12, 1], [23, 4, 1], [30, 12, 1], [7, 13, 1], [14, 12, 1], [15, 7, 1], [23, 8, 1], [6, 13, 1], [25, 9, 2], [29, 1, 2], [16, 7, 1], [24, 0, 2], [30, 1, 0], [13, 6, 1], [24, 15, 2], [30, 14, 0], [13, 8, 1], [6, 4, 0], [7, 2, 0], [16, 8, 1], [30, 1, 2], [17, 14, 1], [7, 3, 1], [17, 4, 0], [1, 7, 0], [25, 1, 2], [24, 7, 0], [6, 6, 0], [15, 1, 1], [2, 6, 1], [6, 10, 0], [10, 14, 0], [25, 7, 0], [29, 7, 1], [1, 8, 1], [1, 9, 0], [16, 15, 0], [2, 4, 1], [14, 8, 1], [29, 4, 2], [15, 4, 0], [17, 5, 0], [18, 3, 1], [8, 0, 0], [15, 8, 0], [24, 7, 2], [29, 13, 1], [13, 14, 0], [30, 6, 0], [13, 3, 0], [24, 12, 1], [25, 7, 2], [8, 1, 1], [6, 11, 1], [8, 2, 0], [14, 1, 1], [30, 10, 0], [10, 4, 0], [25, 8, 1], [30, 2, 1], [17, 2, 0], [18, 6, 0], [1, 10, 0], [2, 3, 0], [13, 8, 0], [25, 12, 0], [8, 3, 0], [13, 5, 0], [29, 0, 0], [18, 1, 0], [1, 3, 0], [2, 10, 0], [15, 2, 0], [1, 4, 0], [29, 3, 0], [30, 3, 0]]
        # randoml lowlight self.bernoullis = [[12, 10, 0], [26, 14, 1], [26, 1, 1], [26, 4, 0], [26, 3, 1], [21, 6, 0], [7, 9, 0], [3, 5, 0], [21, 14, 1], [3, 6, 1], [6, 2, 0], [21, 8, 0], [16, 6, 1], [16, 7, 0], [10, 10, 0], [15, 6, 1], [6, 1, 1], [15, 10, 1], [15, 11, 0], [26, 8, 2], [17, 1, 0], [28, 0, 0], [4, 3, 1], [0, 0, 0], [4, 8, 0], [12, 2, 0], [21, 9, 0], [26, 10, 1], [26, 0, 0], [17, 2, 1], [21, 13, 0], [3, 1, 0], [3, 12, 0], [14, 10, 1], [26, 11, 0], [29, 6, 2], [10, 0, 0], [16, 12, 0], [21, 10, 1], [28, 15, 2], [16, 9, 1], [26, 12, 1], [6, 8, 1], [16, 3, 0], [17, 8, 1], [21, 3, 1], [14, 1, 0], [14, 12, 0], [26, 15, 2], [6, 15, 0], [1, 14, 0], [14, 0, 1], [15, 8, 1], [26, 5, 0], [29, 13, 2], [22, 9, 1], [3, 3, 1], [7, 1, 0], [21, 6, 1], [22, 15, 1], [6, 5, 0], [21, 11, 0], [10, 9, 0], [14, 3, 1], [28, 13, 2], [15, 9, 1], [12, 14, 1], [6, 4, 1], [15, 3, 0], [10, 1, 1], [7, 6, 1], [10, 12, 1], [21, 12, 1], [28, 0, 1], [14, 10, 0], [29, 5, 2], [29, 6, 1], [17, 6, 0], [0, 0, 1], [10, 14, 1], [15, 0, 0], [0, 4, 1], [4, 8, 1], [0, 5, 0], [12, 4, 1], [3, 1, 1], [26, 15, 1], [4, 1, 1], [4, 12, 1], [14, 15, 1], [1, 0, 0], [21, 15, 1], [12, 10, 1], [1, 15, 0], [26, 4, 1], [7, 9, 1], [29, 11, 1], [29, 14, 0], [10, 8, 1], [7, 13, 1], [21, 4, 1], [15, 7, 1], [4, 14, 0], [10, 6, 1], [29, 12, 2], [22, 11, 0], [10, 10, 1], [7, 11, 0], [4, 2, 1], [4, 4, 1], [29, 14, 2], [4, 5, 0], [12, 14, 0], [22, 14, 1], [22, 3, 1], [12, 3, 0], [16, 9, 0], [17, 14, 1], [26, 12, 0], [7, 6, 0], [16, 13, 0], [6, 5, 1], [15, 1, 1], [26, 10, 2], [26, 11, 1], [14, 8, 1], [6, 9, 1], [10, 2, 1], [28, 3, 1], [0, 3, 1], [4, 12, 0], [14, 1, 1], [29, 10, 2], [22, 6, 1], [21, 1, 1], [10, 7, 1], [21, 2, 1], [29, 7, 2], [12, 0, 1], [1, 5, 1], [28, 4, 1], [26, 0, 1], [7, 15, 1], [15, 0, 1], [6, 7, 1], [3, 12, 1], [4, 13, 0], [12, 12, 0], [1, 2, 1], [7, 14, 1], [15, 14, 1], [6, 10, 1], [16, 1, 1], [4, 10, 0], [21, 4, 0], [29, 15, 0], [1, 11, 1], [26, 3, 2], [7, 11, 1], [15, 5, 1], [6, 4, 0], [16, 5, 0], [0, 13, 0], [14, 7, 1], [1, 13, 0], [3, 3, 0], [0, 2, 0], [4, 13, 1], [10, 14, 0], [12, 12, 1], [14, 11, 0], [1, 15, 1], [26, 15, 0], [7, 15, 0], [15, 4, 0], [10, 2, 0], [12, 5, 0], [26, 6, 0], [7, 8, 0], [15, 2, 0], [4, 15, 0], [14, 0, 0], [7, 2, 0], [6, 13, 0], [0, 12, 1], [10, 3, 0], [29, 10, 0], [1, 7, 0], [28, 11, 0], [29, 0, 0], [14, 5, 0], [15, 10, 0], [0, 1, 1], [4, 1, 0], [10, 1, 0], [12, 0, 0], [15, 1, 0], [0, 12, 0], [22, 15, 0], [29, 11, 0], [12, 6, 0], [29, 13, 0], [6, 0, 0], [0, 7, 1], [0, 1, 0]]
        # random inpaint self.bernoullis = [[9, 12, 1], [6, 0, 0], [10, 4, 0], [14, 14, 1], [29, 0, 0], [11, 3, 1], [29, 15, 0], [9, 14, 1], [6, 12, 1], [3, 6, 1], [21, 8, 0], [6, 13, 0], [11, 8, 0], [27, 12, 2], [31, 5, 2], [6, 1, 1], [29, 11, 2], [29, 0, 2], [10, 9, 1], [29, 15, 2], [9, 4, 1], [4, 3, 1], [31, 7, 1], [10, 11, 1], [18, 1, 1], [18, 12, 1], [3, 7, 1], [0, 12, 1], [27, 1, 1], [8, 13, 0], [9, 8, 1], [10, 0, 0], [4, 7, 1], [21, 15, 0], [31, 1, 2], [31, 12, 2], [31, 13, 1], [6, 10, 1], [11, 6, 0], [0, 2, 1], [9, 11, 1], [19, 15, 0], [4, 0, 0], [14, 0, 1], [18, 4, 1], [28, 5, 2], [28, 8, 1], [6, 14, 1], [10, 7, 1], [29, 14, 1], [23, 7, 1], [31, 8, 0], [27, 12, 1], [11, 2, 1], [29, 3, 0], [21, 6, 1], [27, 0, 2], [21, 11, 0], [11, 4, 1], [27, 11, 2], [9, 3, 1], [10, 1, 1], [10, 15, 0], [28, 3, 0], [28, 6, 2], [9, 8, 0], [23, 12, 1], [29, 6, 1], [28, 1, 2], [10, 14, 1], [28, 15, 1], [18, 5, 0], [9, 7, 1], [19, 10, 1], [23, 14, 1], [27, 3, 2], [8, 9, 1], [10, 3, 0], [27, 9, 0], [18, 6, 1], [9, 9, 1], [9, 13, 1], [4, 1, 1], [4, 12, 1], [8, 15, 1], [14, 15, 1], [29, 1, 0], [27, 6, 0], [31, 15, 2], [11, 15, 1], [21, 15, 1], [9, 15, 1], [29, 14, 0], [19, 13, 1], [19, 14, 0], [0, 8, 0], [28, 10, 0], [29, 15, 1], [9, 4, 0], [23, 8, 1], [6, 13, 1], [8, 4, 0], [23, 11, 0], [27, 11, 1], [4, 2, 1], [4, 4, 1], [28, 10, 2], [31, 8, 1], [31, 9, 0], [27, 13, 1], [3, 9, 0], [21, 10, 0], [0, 14, 0], [6, 8, 0], [10, 1, 0], [23, 12, 0], [3, 10, 1], [11, 12, 0], [11, 9, 1], [18, 15, 0], [29, 7, 1], [9, 7, 0], [23, 0, 1], [21, 0, 1], [28, 6, 0], [29, 4, 2], [9, 11, 0], [6, 9, 1], [28, 14, 1], [19, 12, 0], [23, 2, 1], [14, 11, 0], [19, 11, 1], [3, 11, 1], [0, 5, 1], [31, 15, 1], [0, 13, 0], [28, 14, 2], [11, 6, 1], [10, 0, 1], [29, 7, 2], [18, 2, 1], [31, 9, 2], [21, 7, 1], [27, 3, 1], [23, 13, 1], [8, 3, 1], [14, 13, 1], [19, 8, 1], [0, 3, 0], [28, 13, 0], [11, 8, 1], [10, 12, 1], [4, 5, 0], [9, 2, 0], [27, 9, 2], [23, 9, 1], [8, 5, 1], [14, 4, 1], [19, 11, 0], [0, 10, 0], [28, 7, 1], [11, 1, 1], [10, 10, 1], [18, 4, 0], [3, 1, 1], [4, 12, 0], [21, 14, 1], [23, 8, 0], [8, 15, 0], [19, 5, 1], [28, 12, 0], [3, 4, 0], [0, 6, 1], [31, 6, 0], [9, 12, 0], [14, 1, 0], [0, 11, 1], [31, 5, 1], [3, 14, 0], [31, 2, 1], [4, 11, 0], [0, 7, 1], [11, 5, 0], [0, 6, 0], [29, 6, 0], [9, 0, 0], [27, 4, 0], [14, 12, 0], [0, 15, 0], [11, 0, 0], [3, 15, 0], [6, 7, 0], [0, 15, 1], [28, 5, 0], [27, 10, 0], [11, 2, 0], [29, 10, 0], [31, 3, 1], [31, 11, 1], [21, 2, 0], [14, 4, 0], [0, 11, 0], [3, 3, 0], [23, 1, 0], [8, 0, 0], [28, 11, 0], [11, 3, 0], [18, 12, 0], [31, 4, 0]]
        
        #decoder only self.bernoullis = [[26, 14, 1], [27, 6, 2], [28, 4, 2], [26, 8, 0], [28, 8, 2], [29, 15, 0], [24, 14, 0], [25, 9, 1], [27, 8, 2], [30, 0, 1], [27, 0, 0], [26, 8, 2], [28, 10, 1], [31, 6, 0], [24, 3, 2], [30, 14, 2], [24, 5, 2], [27, 1, 1], [31, 1, 0], [27, 15, 2], [27, 5, 1], [28, 0, 2], [31, 10, 2], [31, 11, 1], [27, 4, 2], [26, 11, 2], [28, 2, 1], [29, 7, 2], [30, 6, 2], [29, 12, 1], [24, 11, 1], [29, 13, 2], [28, 9, 0], [24, 12, 2], [25, 9, 0], [28, 13, 0], [28, 7, 2], [25, 12, 2], [29, 2, 2], [24, 2, 0], [27, 11, 2], [31, 4, 2], [25, 2, 0], [25, 1, 1], [25, 0, 2], [25, 3, 1], [29, 3, 2], [29, 4, 1], [24, 2, 2], [28, 3, 0], [25, 2, 2], [29, 6, 1], [29, 10, 1], [30, 8, 2], [25, 5, 0], [30, 5, 2], [31, 0, 2], [31, 5, 1], [24, 1, 1], [27, 9, 2], [25, 10, 1], [24, 15, 0], [29, 11, 1], [24, 3, 1], [28, 7, 1], [25, 12, 1], [30, 0, 2], [26, 10, 0], [31, 6, 1], [30, 13, 1], [26, 6, 2], [25, 2, 1], [26, 0, 1], [27, 5, 2], [31, 9, 2], [29, 7, 1], [30, 8, 1], [29, 4, 2], [24, 10, 1], [28, 14, 1], [24, 7, 2], [24, 9, 2], [28, 6, 2], [31, 5, 0], [30, 9, 2], [25, 6, 2], [31, 5, 2], [28, 15, 1], [29, 1, 1], [24, 14, 1], [31, 8, 1], [30, 1, 0], [25, 13, 2], [27, 13, 1], [30, 1, 1], [25, 7, 1], [31, 9, 1], [29, 14, 0], [31, 15, 1], [28, 13, 2], [27, 14, 1], [29, 8, 1], [24, 6, 1], [26, 2, 0], [30, 12, 1], [27, 9, 0], [29, 12, 0], [30, 3, 2], [31, 3, 2], [28, 12, 1], [24, 0, 2], [30, 9, 1], [25, 6, 0], [27, 13, 0], [31, 10, 0], [27, 1, 0], [31, 14, 0], [31, 13, 1], [25, 10, 0], [31, 8, 0], [24, 9, 0], [31, 0, 0], [31, 15, 0], [31, 9, 0], [25, 7, 0], [26, 0, 0], [24, 0, 0], [28, 0, 0], [28, 1, 0], [25, 11, 0], [28, 6, 0], [24, 1, 0], [29, 8, 0], [29, 0, 0], [26, 1, 0], [30, 10, 0], [28, 14, 0], [28, 8, 0], [24, 12, 0], [28, 11, 0], [28, 2, 0], [27, 12, 0], [30, 13, 0], [27, 10, 0], [30, 14, 0], [27, 2, 0], [25, 1, 0], [29, 13, 0]]
        #self.bernoullis = [[16, 0, 1], [2, 10, 0], [3, 15, 1], [4, 13, 1], [10, 4, 0], [21, 14, 1], [9, 14, 1], [7, 12, 1], [10, 10, 0], [12, 11, 1], [20, 1, 0], [11, 10, 0], [12, 15, 1], [10, 9, 1], [7, 14, 1], [22, 14, 0], [22, 3, 0], [13, 5, 1], [23, 13, 1], [10, 11, 1], [22, 2, 1], [0, 12, 1], [4, 7, 1], [8, 10, 1], [12, 5, 1], [16, 9, 1], [21, 15, 0], [11, 15, 0], [16, 13, 1], [20, 3, 1], [0, 3, 0], [20, 14, 1], [16, 15, 1], [16, 2, 1], [10, 5, 1], [11, 14, 1], [5, 4, 1], [23, 5, 1], [0, 6, 1], [4, 10, 1], [3, 15, 0], [8, 0, 1], [2, 13, 1], [10, 7, 1], [3, 3, 1], [5, 10, 1], [3, 8, 0], [7, 1, 0], [22, 11, 1], [22, 0, 1], [20, 6, 1], [10, 9, 0], [22, 13, 1], [20, 10, 1], [7, 15, 1], [11, 9, 0], [23, 13, 0], [20, 12, 1], [20, 1, 1], [9, 8, 0], [5, 0, 1], [5, 14, 0], [23, 2, 0], [21, 12, 1], [22, 1, 1], [9, 7, 1], [13, 10, 1], [0, 15, 1], [8, 9, 1], [7, 8, 0], [8, 13, 1], [22, 7, 1], [21, 3, 0], [7, 7, 1], [21, 2, 1], [11, 15, 1], [2, 13, 0], [10, 4, 1], [20, 8, 1], [22, 11, 0], [13, 6, 1], [4, 15, 1], [4, 2, 1], [20, 10, 0], [23, 15, 0], [3, 4, 1], [13, 8, 1], [16, 4, 1], [22, 14, 1], [12, 3, 0], [0, 14, 0], [16, 8, 1], [11, 7, 1], [7, 6, 0], [11, 12, 0], [23, 0, 1], [20, 5, 0], [5, 3, 1], [4, 10, 0], [23, 2, 1], [0, 3, 1], [23, 7, 0], [8, 12, 1], [0, 5, 1], [11, 2, 0], [3, 2, 1], [23, 1, 1], [0, 13, 1], [16, 5, 0], [11, 8, 1], [4, 8, 1], [2, 9, 1], [20, 4, 1], [8, 10, 0], [4, 0, 0], [10, 15, 0], [0, 8, 0], [20, 4, 0], [3, 12, 0], [23, 1, 0], [4, 12, 0], [9, 10, 0], [9, 7, 0], [10, 0, 0], [9, 11, 0], [5, 7, 0], [2, 1, 0], [22, 1, 0], [9, 15, 0], [10, 2, 0], [7, 2, 0], [9, 12, 0], [12, 14, 0], [9, 0, 0], [4, 1, 0], [23, 14, 0], [4, 3, 0], [13, 9, 0], [4, 14, 0], [5, 11, 0], [11, 0, 0], [20, 0, 0], [3, 11, 0], [0, 11, 0], [16, 3, 0], [0, 12, 0], [7, 0, 0], [3, 0, 0], [10, 14, 0], [12, 9, 0], [3, 1, 0], [0, 11, 1], [11, 13, 0], [3, 5, 0], [8, 2, 0], [0, 6, 0], [7, 12, 0]]
        
        #head granulair self.bernoullis = [[23, 4], [30, 0], [28, 12], [26, 5], [29, 4], [5, 3], [28, 5], [3, 15], [28, 14], [30, 11], [5, 12], [16, 6], [13, 15], [22, 12], [0, 0], [13, 3], [26, 0], [24, 12], [26, 9], [22, 5], [27, 1], [13, 5], [22, 7], [24, 7], [16, 3], [29, 15], [22, 9], [5, 2], [5, 11], [24, 0], [10, 10], [16, 5], [16, 14], [22, 2], [24, 2], [30, 15], [25, 10], [16, 7], [23, 12], [27, 3], [10, 5], [25, 3], [10, 14], [23, 14], [30, 1], [10, 7], [24, 6], [29, 14], [31, 11], [27, 7], [10, 0], [28, 15], [0, 8], [16, 4], [26, 8], [21, 12], [23, 9], [27, 9], [0, 10], [26, 10], [31, 6], [21, 5], [5, 8], [28, 10], [0, 3], [25, 2], [10, 13], [24, 15], [29, 11], [16, 11], [25, 1], [31, 10], [29, 8], [24, 10], [23, 7], [22, 0], [0, 5], [13, 0], [21, 7], [10, 8], [16, 0], [30, 10], [25, 0], [27, 13], [3, 0], [24, 5], [0, 9], [13, 1], [31, 8], [3, 11], [0, 2], [21, 1], [0, 4], [30, 8], [28, 11], [3, 5], [23, 3], [31, 1]]
        #layer granularity self.bernoullis = [[21], [24], [27], [10], [16], [0], [13], [25], [30], [31], [29], [3], [23], [5]]
        
        #self.bernoullis = [[25, 2, 2], [26, 14, 2], [29, 15, 2], [24, 7, 2], [26, 0, 2], [25, 13, 2], [26, 6, 2], [25, 5, 2], [25, 9, 2], [24, 10, 2], [25, 4, 2], [27, 3, 2], [25, 12, 2], [27, 1, 2], [25, 7, 2], [27, 5, 2], [28, 5, 2], [28, 10, 2], [28, 14, 2], [28, 7, 2], [27, 8, 2], [28, 9, 2], [25, 11, 2], [22, 13, 1], [25, 15, 2], [23, 13, 1], [1, 2, 1], [25, 10, 2], [26, 9, 2], [27, 9, 2], [26, 12, 2], [2, 9, 1], [27, 12, 2], [1, 6, 1], [25, 2, 1], [29, 7, 2], [24, 9, 2], [27, 2, 2], [28, 1, 2], [16, 2, 1], [27, 4, 2], [24, 4, 2], [30, 7, 2], [10, 11, 1], [27, 1, 1], [3, 13, 1], [27, 7, 2], [27, 15, 2], [24, 13, 2], [20, 1, 1], [16, 8, 1], [24, 1, 2], [29, 5, 2], [26, 5, 2], [29, 15, 1], [27, 11, 2], [20, 12, 1], [27, 14, 2], [26, 10, 2], [4, 15, 1], [30, 0, 2], [29, 11, 2], [29, 4, 2], [27, 3, 1], [17, 0, 1], [0, 5, 1], [6, 13, 1], [6, 6, 1], [2, 11, 1], [1, 8, 1], [31, 0, 2], [19, 12, 1], [28, 15, 2], [1, 11, 1], [1, 12, 1], [29, 12, 2], [6, 2, 1], [30, 11, 2], [24, 6, 2], [9, 6, 1], [5, 7, 1], [13, 4, 1], [27, 0, 2], [0, 8, 1], [27, 8, 1], [21, 6, 0], [15, 12, 1], [0, 14, 1], [29, 1, 2], [24, 11, 2], [27, 0, 1], [22, 6, 1], [24, 8, 2], [12, 4, 1], [20, 10, 1], [30, 9, 2], [12, 15, 1], [11, 1, 1], [23, 10, 1], [29, 7, 1], [23, 2, 1], [15, 0, 1], [21, 2, 1], [29, 13, 2], [24, 15, 1], [9, 13, 1], [22, 9, 1], [11, 14, 1], [18, 10, 1], [25, 4, 1], [4, 10, 1], [19, 11, 1], [30, 6, 2], [25, 10, 1], [28, 2, 2], [27, 5, 1], [24, 11, 1], [19, 2, 1], [13, 13, 1], [22, 7, 1], [0, 8, 0], [30, 12, 2], [26, 3, 2], [26, 4, 1], [15, 7, 1], [24, 3, 2], [25, 3, 1], [28, 4, 2], [13, 14, 1], [25, 14, 2], [3, 8, 1], [15, 14, 1], [18, 8, 1], [13, 8, 1], [22, 14, 1], [30, 13, 2], [29, 12, 1], [24, 7, 1], [23, 7, 1], [15, 11, 1], [27, 9, 1], [26, 15, 2], [24, 10, 1], [11, 5, 1], [29, 2, 2], [10, 9, 1], [18, 9, 0], [11, 0, 1], [23, 14, 1], [17, 9, 1], [21, 8, 1], [30, 10, 2], [4, 2, 1], [15, 5, 1], [25, 12, 1], [13, 11, 1], [9, 7, 1], [19, 6, 0], [10, 6, 1], [30, 1, 2], [28, 3, 1], [15, 1, 1], [11, 3, 1], [19, 5, 1], [7, 12, 1], [28, 12, 2], [26, 0, 1], [8, 2, 1], [25, 0, 1], [26, 6, 1], [5, 2, 1], [8, 1, 1], [25, 7, 1], [2, 14, 1], [17, 14, 1], [28, 10, 1], [8, 10, 1], [25, 9, 1], [27, 7, 1], [5, 15, 1], [18, 1, 1], [19, 7, 1], [12, 0, 1], [20, 8, 1], [4, 11, 1], [15, 6, 0], [6, 8, 1], [26, 12, 1], [8, 8, 1], [25, 1, 1], [7, 5, 1], [24, 6, 1], [28, 0, 1], [0, 0, 0], [19, 8, 1], [22, 4, 1], [15, 8, 1], [19, 13, 1], [30, 7, 1], [14, 15, 1], [12, 2, 1], [10, 14, 1], [11, 15, 0], [19, 15, 1], [5, 4, 1], [27, 15, 1], [28, 8, 2], [5, 8, 1], [2, 12, 0], [29, 9, 2], [10, 3, 1], [17, 5, 1], [9, 15, 1], [7, 9, 1], [16, 1, 0], [24, 14, 1], [18, 2, 0], [4, 8, 1], [29, 14, 2], [30, 12, 1], [21, 5, 1], [17, 2, 1], [17, 6, 1], [17, 15, 0], [28, 15, 1], [24, 14, 2], [0, 10, 1], [23, 12, 0], [15, 15, 1], [18, 5, 1], [20, 3, 1], [5, 14, 1], [9, 4, 0], [16, 0, 1], [1, 9, 0], [12, 3, 1], [25, 3, 2], [28, 5, 1], [24, 13, 1], [1, 5, 1], [9, 4, 1], [3, 14, 1], [8, 13, 1], [3, 2, 1], [3, 15, 1], [30, 15, 1], [16, 9, 1], [18, 15, 1], [20, 0, 1], [22, 10, 1], [27, 11, 1], [31, 2, 2], [22, 6, 0], [13, 7, 1], [14, 13, 1], [23, 5, 1], [29, 3, 1], [11, 9, 0], [5, 5, 0], [18, 3, 0], [25, 11, 1], [21, 0, 0], [4, 4, 1], [17, 11, 0], [29, 4, 1], [8, 7, 0], [19, 9, 1], [7, 6, 0], [22, 4, 0], [7, 13, 1], [3, 7, 1], [14, 6, 1], [19, 0, 1], [6, 4, 0], [26, 9, 1], [18, 14, 1], [20, 4, 1], [30, 5, 2], [2, 12, 1], [10, 15, 1], [20, 14, 1], [21, 13, 0], [31, 10, 2], [23, 15, 1], [20, 15, 0], [15, 9, 1], [7, 14, 0], [5, 0, 1]]
        #self.setup = "cma_10_0"

        #self.bernoullis = [[24, 10, 2], [25, 10, 2], [25, 2, 2], [25, 1, 2], [25, 5, 2], [24, 5, 2], [26, 0, 2], [25, 2, 1], [19, 6, 1], [27, 12, 2], [27, 5, 2], [26, 10, 2], [21, 6, 1], [25, 7, 2], [24, 7, 2], [26, 7, 2], [8, 14, 1], [27, 3, 2], [28, 6, 2], [27, 9, 2], [24, 15, 2], [23, 7, 1], [26, 12, 2], [29, 4, 2], [29, 7, 2], [7, 14, 1], [28, 10, 2], [29, 10, 2], [24, 14, 2], [27, 8, 1], [29, 13, 2], [24, 8, 2], [24, 13, 2], [25, 10, 1], [27, 3, 1], [25, 13, 2], [27, 8, 2], [26, 0, 1], [26, 10, 1], [28, 1, 2], [25, 4, 2], [16, 13, 1], [25, 0, 1], [27, 1, 2], [21, 2, 1], [28, 15, 2], [27, 2, 2], [8, 7, 1], [24, 10, 1], [25, 13, 1], [13, 4, 1], [11, 6, 1], [0, 10, 1], [29, 11, 2], [10, 12, 1], [15, 0, 1], [28, 14, 2], [25, 3, 2], [9, 9, 1], [17, 14, 1], [7, 13, 1], [9, 6, 1], [18, 2, 1], [27, 0, 2], [21, 1, 1], [0, 8, 0], [0, 3, 1], [27, 5, 1], [13, 12, 1], [25, 5, 1], [9, 10, 1], [24, 11, 2], [15, 6, 1], [15, 11, 1], [23, 1, 1], [10, 0, 1], [25, 7, 1], [28, 6, 1], [6, 3, 1], [27, 15, 1], [25, 12, 2], [18, 13, 1], [24, 3, 2], [20, 12, 0], [28, 5, 2], [0, 0, 1], [13, 1, 1], [27, 0, 1], [12, 0, 1], [21, 7, 1], [24, 6, 2], [8, 3, 1], [16, 6, 1], [28, 11, 2], [26, 4, 1], [11, 15, 1], [23, 8, 1], [26, 5, 1], [11, 8, 1], [6, 2, 1], [14, 3, 1], [16, 1, 1], [17, 3, 1], [8, 1, 1], [25, 1, 1], [25, 12, 1], [14, 11, 1], [23, 2, 1], [10, 2, 1], [17, 7, 1], [30, 2, 2], [24, 1, 2], [12, 15, 1], [30, 11, 2], [27, 4, 1], [25, 11, 1], [11, 10, 1], [22, 11, 1], [15, 5, 1], [20, 15, 0], [7, 6, 1], [28, 7, 1], [11, 4, 1], [24, 7, 1], [9, 3, 1], [30, 12, 2], [16, 9, 1], [7, 12, 1], [14, 2, 1], [9, 1, 1], [26, 4, 2], [23, 11, 1], [15, 3, 1], [10, 10, 1], [5, 5, 1], [20, 13, 1], [11, 9, 1], [20, 7, 1], [29, 3, 2], [26, 9, 2], [21, 12, 1], [27, 14, 1], [26, 14, 1], [4, 11, 1], [7, 15, 1], [25, 6, 1], [19, 14, 1], [24, 15, 1], [18, 15, 0], [24, 2, 1], [19, 15, 1], [18, 5, 1], [6, 10, 1], [23, 13, 0], [31, 11, 2], [13, 0, 1], [28, 10, 1], [11, 12, 0], [26, 6, 1], [22, 2, 1], [17, 0, 1], [8, 2, 1], [18, 15, 1], [24, 5, 1], [10, 5, 1], [7, 10, 1], [22, 13, 0], [21, 7, 0], [0, 13, 0], [1, 0, 1], [16, 5, 1], [3, 7, 1], [8, 9, 1], [4, 13, 1], [30, 9, 2], [10, 1, 1], [15, 2, 1], [5, 15, 1], [18, 14, 1], [22, 4, 0], [29, 1, 2], [14, 0, 1], [14, 8, 1], [15, 0, 0], [25, 6, 2], [13, 11, 1], [7, 11, 1], [0, 11, 1], [1, 4, 1], [24, 0, 1], [4, 5, 1], [23, 14, 1], [25, 14, 2], [16, 11, 1], [29, 0, 1], [18, 6, 1], [12, 4, 1], [19, 12, 1], [16, 10, 1], [28, 3, 1], [18, 8, 1], [28, 9, 2], [14, 9, 1], [30, 15, 2], [5, 0, 1], [29, 10, 1], [12, 2, 1], [0, 9, 0], [24, 14, 1], [30, 8, 2], [15, 4, 1], [21, 8, 1], [15, 9, 0], [18, 3, 0], [11, 7, 1], [17, 4, 1], [10, 8, 1], [20, 2, 0], [30, 1, 2], [5, 7, 1], [1, 13, 1], [6, 7, 1], [9, 8, 1], [22, 5, 1], [21, 4, 1], [14, 10, 1], [18, 9, 1], [21, 5, 1], [20, 11, 1], [23, 3, 0], [21, 3, 1], [20, 1, 0], [3, 8, 1], [29, 5, 1], [14, 1, 1], [12, 9, 1], [25, 14, 1], [20, 3, 0], [4, 8, 1], [26, 3, 1], [17, 2, 1], [24, 8, 1], [28, 1, 1], [0, 14, 0], [19, 2, 1], [7, 4, 1], [26, 9, 1], [30, 11, 0], [12, 2, 0], [1, 8, 1], [28, 8, 2], [30, 0, 1], [24, 13, 1], [19, 12, 0], [16, 8, 0], [12, 14, 1], [4, 3, 1], [27, 11, 1], [0, 13, 1], [17, 13, 1], [13, 2, 1], [19, 7, 1], [11, 1, 0], [15, 1, 0], [27, 12, 1], [19, 3, 0], [10, 15, 0], [31, 10, 2], [23, 11, 0], [3, 5, 1], [15, 3, 0], [9, 2, 1], [17, 3, 0], [29, 9, 2], [24, 12, 1], [21, 14, 0], [12, 8, 0], [21, 14, 1], [22, 12, 1], [11, 12, 1], [20, 15, 1], [4, 9, 0], [3, 12, 1], [31, 9, 2], [15, 7, 0], [3, 13, 1], [7, 8, 1], [5, 8, 1]]
        #self.setup = "cma_10_1"


        #self.bernoullis = [[25, 10, 2], [24, 10, 2], [25, 2, 2], [25, 1, 2], [24, 5, 2], [25, 7, 2], [21, 6, 1], [24, 15, 2], [8, 14, 1], [24, 7, 2], [19, 6, 1], [25, 4, 2], [25, 5, 2], [24, 8, 2], [0, 3, 1], [28, 10, 2], [8, 3, 1], [27, 9, 2], [23, 7, 1], [24, 14, 2], [27, 5, 2], [8, 7, 1], [0, 3, 0], [10, 0, 1], [10, 1, 1], [27, 12, 2], [10, 12, 1], [7, 14, 1], [15, 11, 1], [25, 6, 2], [10, 13, 1], [25, 13, 2], [12, 0, 1], [26, 12, 2], [24, 2, 2], [9, 9, 1], [26, 13, 2], [28, 14, 2], [6, 13, 1], [26, 2, 2], [9, 10, 1], [7, 8, 1], [25, 11, 2], [9, 6, 1], [24, 13, 2], [8, 11, 1], [11, 8, 1], [6, 3, 1], [16, 1, 1], [29, 4, 2], [10, 2, 1], [29, 11, 2], [27, 3, 1], [29, 13, 2], [9, 8, 1], [28, 7, 2], [11, 6, 1], [3, 13, 1], [16, 13, 1], [12, 9, 1], [2, 11, 1], [1, 6, 1], [21, 7, 1], [1, 2, 1], [15, 0, 1], [1, 8, 1], [6, 14, 1], [30, 0, 2], [7, 6, 1], [24, 6, 2], [30, 9, 2], [13, 12, 1], [10, 11, 1], [25, 14, 2], [15, 6, 1], [4, 8, 1], [11, 11, 1], [26, 4, 2], [20, 8, 1], [22, 13, 0], [26, 0, 2], [25, 12, 2], [20, 12, 0], [18, 13, 1], [28, 4, 2], [26, 9, 2], [7, 15, 1], [16, 9, 1], [27, 15, 1], [21, 1, 1], [19, 14, 1], [27, 0, 2], [2, 9, 1], [20, 11, 1], [9, 3, 1], [11, 4, 1], [12, 12, 1], [18, 9, 1], [23, 1, 1], [7, 11, 1], [24, 11, 2], [17, 0, 1], [0, 5, 0], [25, 3, 2], [6, 5, 1], [25, 12, 1], [16, 10, 1], [11, 15, 1], [13, 1, 1], [23, 13, 0], [1, 9, 1], [14, 9, 1], [13, 0, 1], [11, 10, 1], [12, 15, 1], [18, 4, 1], [25, 15, 1], [13, 3, 1], [25, 8, 1], [1, 12, 1], [23, 12, 1], [15, 2, 1], [29, 15, 2], [18, 2, 1], [18, 11, 1], [8, 9, 0], [25, 2, 1], [23, 8, 1], [24, 1, 2], [27, 2, 2], [28, 5, 2], [0, 10, 1], [23, 14, 1], [21, 12, 1], [11, 1, 0], [16, 5, 1], [29, 1, 2], [15, 4, 1], [22, 12, 1], [6, 7, 1], [27, 0, 1], [7, 7, 1], [15, 5, 1], [14, 14, 1], [20, 15, 0], [24, 10, 1], [17, 7, 1], [12, 11, 1], [29, 3, 2], [12, 5, 1], [25, 13, 1], [14, 11, 1], [18, 6, 1], [20, 1, 0], [12, 4, 1], [27, 5, 1], [6, 1, 1], [13, 13, 0], [28, 1, 2], [9, 1, 1], [15, 13, 1], [27, 4, 1], [13, 11, 1], [26, 0, 1], [13, 6, 1], [17, 14, 1], [14, 0, 1], [2, 6, 1], [24, 0, 2], [0, 13, 1], [25, 10, 1], [7, 9, 0], [22, 5, 1], [30, 15, 2], [12, 14, 1], [26, 7, 2], [7, 2, 1], [13, 4, 0], [22, 0, 1], [18, 15, 1], [28, 6, 2], [25, 0, 1], [22, 1, 1], [16, 7, 0], [26, 14, 1], [22, 7, 0], [27, 9, 1], [24, 7, 1], [21, 15, 0], [31, 1, 2], [7, 12, 1], [24, 9, 2], [16, 12, 1], [19, 15, 1], [4, 5, 1], [7, 10, 1], [9, 2, 1], [10, 15, 0], [5, 5, 1], [17, 4, 1], [4, 1, 1], [2, 8, 0], [20, 2, 0], [21, 0, 1], [28, 8, 2], [16, 8, 0], [27, 7, 1], [22, 11, 1], [7, 1, 0], [12, 2, 0], [12, 8, 1], [26, 6, 1], [21, 7, 0], [20, 15, 1], [27, 11, 1], [14, 8, 1], [29, 5, 2], [21, 11, 1], [24, 11, 1], [19, 4, 1], [15, 1, 0], [11, 12, 0], [25, 7, 1], [19, 7, 0], [4, 2, 1], [11, 9, 1], [25, 1, 1], [1, 0, 1], [6, 2, 0], [5, 9, 1], [19, 3, 1], [30, 13, 2], [25, 11, 1], [4, 13, 1], [12, 1, 1], [11, 4, 0], [18, 5, 1], [17, 12, 1], [15, 9, 0], [27, 3, 2], [4, 14, 1], [7, 0, 1], [28, 6, 1], [15, 12, 0], [6, 0, 1], [16, 5, 0], [10, 5, 1], [7, 13, 0], [15, 15, 1], [20, 9, 0], [15, 3, 1], [14, 15, 0], [22, 14, 0], [23, 3, 0], [15, 0, 0], [0, 10, 0], [28, 3, 1], [18, 0, 1], [14, 7, 0], [18, 3, 0], [16, 13, 0], [23, 2, 0], [8, 4, 0], [10, 11, 0], [1, 14, 1], [3, 6, 1], [19, 12, 0], [18, 13, 0], [19, 11, 0], [19, 5, 0], [16, 11, 1], [27, 8, 1], [30, 8, 2], [25, 5, 1], [15, 5, 0], [29, 7, 1], [23, 11, 1], [26, 3, 1], [20, 13, 1], [21, 3, 1], [5, 2, 0], [24, 3, 1], [24, 8, 1], [29, 9, 2], [12, 0, 0], [19, 2, 0], [21, 8, 1], [16, 11, 0]]
        #self.setup = "cma_10_3"

        #self.bernoullis = [[24, 10, 2], [25, 10, 2], [0, 3, 1], [24, 5, 2], [25, 1, 2], [25, 7, 2], [21, 6, 1], [25, 2, 2], [24, 15, 2], [24, 7, 2], [19, 6, 1], [8, 14, 1], [25, 4, 2], [25, 5, 2], [27, 9, 2], [23, 7, 1], [24, 8, 2], [0, 3, 0], [10, 1, 1], [28, 10, 2], [27, 5, 2], [24, 14, 2], [27, 12, 2], [8, 7, 1], [8, 3, 1], [9, 10, 1], [10, 12, 1], [15, 11, 1], [26, 12, 2], [24, 13, 2], [7, 14, 1], [9, 9, 1], [25, 6, 2], [28, 14, 2], [9, 8, 1], [24, 2, 2], [25, 11, 2], [26, 13, 2], [15, 0, 1], [11, 6, 1], [8, 11, 1], [10, 13, 1], [25, 13, 2], [6, 3, 1], [17, 0, 1], [12, 9, 1], [6, 13, 1], [16, 13, 1], [15, 6, 1], [29, 13, 2], [26, 9, 2], [26, 2, 2], [6, 14, 1], [25, 12, 2], [10, 0, 1], [29, 4, 2], [28, 6, 2], [11, 8, 1], [29, 11, 2], [26, 0, 2], [27, 0, 2], [10, 2, 1], [21, 7, 1], [20, 12, 0], [30, 0, 2], [7, 8, 1], [12, 0, 1], [24, 6, 2], [25, 14, 2], [9, 1, 1], [17, 7, 1], [18, 9, 1], [16, 1, 1], [13, 1, 1], [13, 12, 1], [22, 13, 0], [14, 11, 1], [25, 8, 1], [0, 8, 1], [7, 15, 1], [11, 15, 1], [21, 1, 1], [9, 2, 1], [25, 3, 2], [6, 5, 1], [25, 12, 1], [27, 15, 1], [0, 0, 1], [1, 9, 1], [27, 3, 1], [9, 3, 1], [4, 8, 1], [28, 4, 2], [30, 9, 2], [2, 11, 1], [26, 4, 2], [11, 11, 1], [12, 12, 1], [18, 2, 1], [23, 12, 1], [27, 5, 1], [0, 10, 1], [23, 1, 1], [9, 6, 1], [25, 15, 1], [28, 7, 2], [14, 0, 1], [20, 8, 1], [18, 13, 1], [27, 2, 2], [20, 15, 0], [23, 13, 0], [11, 4, 1], [24, 11, 2], [6, 1, 1], [24, 9, 2], [7, 7, 1], [25, 2, 1], [15, 5, 1], [11, 10, 1], [23, 8, 1], [15, 3, 1], [0, 13, 1], [7, 11, 1], [0, 5, 0], [29, 1, 2], [19, 11, 1], [1, 8, 1], [10, 11, 1], [20, 1, 0], [7, 4, 1], [14, 14, 1], [25, 10, 1], [19, 12, 1], [19, 14, 1], [14, 9, 1], [15, 4, 1], [7, 6, 1], [27, 3, 2], [13, 6, 1], [18, 5, 1], [0, 11, 1], [13, 4, 0], [21, 7, 0], [6, 12, 1], [3, 13, 1], [10, 15, 0], [25, 5, 1], [14, 8, 1], [24, 10, 1], [11, 1, 0], [20, 2, 1], [17, 5, 1], [17, 4, 1], [25, 13, 1], [8, 9, 0], [13, 0, 1], [13, 13, 0], [14, 3, 1], [18, 6, 1], [18, 4, 1], [20, 15, 1], [27, 0, 1], [22, 7, 0], [11, 12, 0], [1, 2, 1], [8, 4, 1], [12, 11, 1], [19, 15, 1], [27, 8, 1], [12, 15, 1], [15, 2, 1], [26, 3, 2], [26, 0, 1], [29, 5, 2], [2, 8, 0], [16, 7, 0], [5, 8, 1], [18, 3, 0], [26, 14, 1], [26, 6, 1], [16, 10, 1], [13, 11, 1], [27, 9, 1], [24, 0, 2], [19, 5, 0], [24, 11, 1], [12, 13, 0], [30, 15, 2], [26, 7, 2], [23, 3, 0], [13, 9, 1], [1, 13, 1], [8, 1, 1], [16, 12, 1], [30, 8, 2], [9, 0, 1], [25, 7, 1], [10, 8, 1], [19, 4, 1], [15, 9, 0], [22, 5, 1], [27, 11, 1], [16, 8, 0], [22, 12, 1], [25, 0, 1], [16, 9, 1], [7, 1, 0], [31, 1, 2], [30, 12, 2], [5, 5, 1], [28, 7, 1], [19, 7, 0], [20, 13, 1], [4, 3, 1], [29, 7, 1], [28, 8, 2], [12, 14, 1], [20, 3, 1], [21, 15, 0], [1, 0, 1], [7, 9, 0], [16, 11, 1], [6, 0, 1], [17, 14, 1], [0, 6, 1], [6, 2, 0], [7, 0, 1], [2, 6, 1], [26, 4, 1], [4, 14, 1], [15, 1, 0], [22, 1, 1], [20, 9, 0], [30, 14, 2], [1, 4, 1], [21, 8, 1], [23, 2, 0], [15, 3, 0], [15, 12, 0], [24, 8, 1], [19, 3, 1], [27, 7, 1], [30, 6, 2], [22, 3, 1], [16, 11, 0], [14, 7, 0], [6, 7, 1], [18, 13, 0], [28, 15, 1], [21, 10, 0], [23, 11, 1], [1, 12, 1], [24, 2, 1], [11, 4, 0], [0, 8, 0], [4, 1, 1], [21, 12, 1], [28, 3, 1], [7, 12, 1], [17, 13, 1], [2, 5, 1], [16, 9, 0], [22, 2, 1], [16, 5, 0], [18, 15, 0], [14, 10, 1], [13, 3, 1], [3, 6, 1], [15, 0, 0], [19, 3, 0], [25, 1, 1], [12, 0, 0], [27, 2, 1], [0, 14, 0], [4, 12, 0], [10, 11, 0], [1, 14, 1], [15, 7, 0], [16, 13, 0], [26, 9, 1], [5, 2, 0], [28, 6, 1], [18, 11, 1], [6, 10, 1], [12, 2, 0], [17, 3, 0], [21, 3, 0]]
        #self.setup = "cma_10_4"

        #self.bernoullis = [[24, 10, 2], [25, 10, 2], [25, 2, 2], [25, 7, 2], [24, 5, 2], [24, 7, 2], [25, 1, 2], [25, 5, 2], [25, 4, 2], [26, 0, 2], [21, 6, 1], [25, 13, 2], [28, 10, 2], [27, 5, 2], [19, 6, 1], [0, 3, 1], [27, 9, 2], [24, 15, 2], [8, 14, 1], [24, 8, 2], [27, 12, 2], [29, 15, 2], [25, 12, 2], [23, 7, 1], [28, 14, 2], [27, 3, 2], [26, 12, 2], [24, 14, 2], [26, 14, 2], [24, 13, 2], [26, 6, 2], [25, 11, 2], [8, 3, 1], [28, 5, 2], [15, 11, 1], [10, 12, 1], [28, 7, 2], [25, 2, 1], [0, 3, 0], [26, 9, 2], [6, 13, 1], [10, 0, 1], [9, 9, 1], [29, 4, 2], [27, 8, 2], [29, 13, 2], [8, 7, 1], [29, 11, 2], [9, 10, 1], [11, 6, 1], [27, 3, 1], [15, 0, 1], [12, 0, 1], [27, 2, 2], [30, 0, 2], [7, 14, 1], [9, 6, 1], [10, 1, 1], [1, 2, 1], [24, 6, 2], [27, 1, 2], [28, 9, 2], [27, 0, 2], [6, 3, 1], [11, 8, 1], [26, 13, 2], [24, 2, 2], [10, 11, 1], [10, 13, 1], [2, 9, 1], [30, 9, 2], [4, 8, 1], [2, 11, 1], [10, 2, 1], [8, 11, 1], [28, 1, 2], [25, 14, 2], [25, 6, 2], [3, 13, 1], [17, 0, 1], [1, 6, 1], [29, 7, 2], [0, 10, 1], [9, 3, 1], [24, 11, 2], [7, 8, 1], [12, 9, 1], [9, 8, 1], [15, 6, 1], [27, 15, 1], [16, 1, 1], [13, 12, 1], [1, 8, 1], [21, 7, 1], [25, 12, 1], [25, 10, 1], [9, 1, 1], [16, 13, 1], [24, 1, 2], [27, 5, 1], [28, 4, 2], [6, 14, 1], [24, 10, 1], [27, 0, 1], [21, 1, 1], [25, 3, 2], [29, 1, 2], [20, 12, 0], [29, 5, 2], [20, 8, 1], [12, 15, 1], [20, 15, 0], [18, 2, 1], [19, 12, 1], [23, 1, 1], [18, 13, 1], [26, 0, 1], [11, 15, 1], [13, 1, 1], [26, 4, 2], [27, 8, 1], [28, 6, 2], [17, 14, 1], [7, 15, 1], [22, 13, 0], [11, 4, 1], [30, 7, 2], [16, 9, 1], [7, 6, 1], [1, 12, 1], [15, 5, 1], [27, 1, 1], [29, 15, 1], [7, 11, 1], [11, 11, 1], [17, 7, 1], [28, 15, 2], [13, 0, 1], [9, 2, 1], [14, 11, 1], [25, 0, 1], [18, 5, 1], [13, 11, 1], [11, 10, 1], [25, 7, 1], [27, 9, 1], [12, 4, 1], [15, 3, 1], [27, 4, 2], [27, 11, 2], [24, 11, 1], [6, 7, 1], [13, 4, 1], [23, 14, 1], [24, 9, 2], [14, 14, 1], [1, 9, 1], [26, 6, 1], [6, 5, 1], [14, 9, 1], [7, 12, 1], [26, 4, 1], [0, 5, 0], [6, 1, 1], [21, 8, 1], [24, 7, 1], [25, 1, 1], [26, 3, 2], [16, 8, 1], [29, 7, 1], [8, 9, 0], [28, 3, 1], [25, 11, 1], [21, 7, 0], [15, 2, 1], [28, 8, 2], [20, 1, 0], [22, 12, 1], [23, 13, 0], [12, 12, 1], [5, 5, 1], [30, 12, 2], [31, 0, 2], [16, 12, 1], [14, 8, 1], [30, 11, 2], [7, 7, 1], [19, 3, 1], [14, 0, 1], [30, 15, 2], [27, 7, 1], [19, 15, 1], [11, 1, 0], [16, 11, 1], [25, 15, 1], [14, 3, 1], [13, 3, 1], [18, 4, 1], [27, 14, 2], [21, 12, 1], [27, 11, 1], [26, 14, 1], [29, 3, 2], [12, 11, 1], [17, 4, 1], [2, 6, 1], [28, 2, 2], [13, 13, 0], [23, 12, 1], [26, 7, 2], [27, 7, 2], [28, 10, 1], [25, 8, 1], [26, 10, 1], [13, 4, 0], [6, 12, 1], [18, 11, 1], [18, 15, 0], [4, 2, 1], [11, 12, 0], [24, 15, 1], [31, 1, 2], [16, 5, 1], [24, 0, 2], [12, 14, 1], [29, 12, 1], [2, 8, 0], [23, 8, 1], [21, 2, 1], [7, 4, 1], [10, 15, 0], [16, 7, 0], [25, 3, 1], [22, 7, 0], [20, 2, 0], [7, 13, 1], [15, 4, 1], [15, 9, 0], [22, 5, 1], [5, 9, 1], [25, 5, 1], [18, 9, 1], [4, 14, 1], [30, 13, 2], [30, 6, 2], [12, 2, 0], [0, 0, 1], [26, 3, 1], [0, 8, 0], [28, 6, 1], [29, 9, 2], [18, 6, 1], [24, 0, 1], [0, 13, 1], [26, 5, 2], [0, 5, 1], [15, 1, 0], [16, 8, 0], [8, 1, 1], [23, 10, 1], [7, 9, 0], [20, 13, 1], [25, 4, 1], [19, 14, 1], [7, 10, 1], [12, 13, 0], [8, 4, 1], [23, 3, 0], [4, 1, 1], [22, 4, 0], [1, 15, 1], [26, 9, 1], [19, 4, 1], [26, 5, 1], [13, 6, 1], [3, 7, 1], [21, 5, 1], [16, 10, 1], [23, 11, 1], [19, 3, 0], [10, 8, 1], [14, 13, 1], [6, 0, 1], [4, 13, 1], [4, 11, 1], [30, 8, 2], [20, 15, 1], [29, 10, 2]]
        #self.setup = "cma_10_None"

        self.bernoullis = []
        self.setup = "MAE-VQGAN"


        self.eps = 1e-6
        self.batch_size = 5*args.train_images if args.task is None else args.train_images

        self.train_ds = train_ds
        self.eval_ds = eval_ds

        self.task_tensor = task_tensor

        self.areas_to_check = [None]

        """ if load_model is not None:
            self.bernoullis = pickle.load(open(load_model, 'rb'))
            self.bernoullis = [torch.tensor(bernoulli, requires_grad=True) for bernoulli in self.bernoullis] """

    def loss_mse(self, target, ours):
        ours = (torch.permute(ours / 255., (2, 0, 1)) - torch.tensor(imagenet_mean, dtype=torch.float32).to(ours.device)[:, None, None]) / torch.tensor(imagenet_std, dtype=torch.float32).to(ours.device)[:, None, None]
        target = (torch.permute(target.to(ours.device) / 255., (2, 0, 1)) - torch.tensor(imagenet_mean, dtype=torch.float32).to(ours.device)[:, None, None]) / torch.tensor(imagenet_std, dtype=torch.float32).to(ours.device)[:, None, None]

        target = target[:, 113:, 113:]
        ours = ours[:, 113:, 113:]
        mse = torch.mean((target - ours) ** 2)
        return mse.item()

    def loss_iou(self, original_image, generated_result):
        fg_color=WHITE
        bg_color=BLACK

        original_image = round_image(original_image, [WHITE, BLACK])
        generated_result = round_image(generated_result, [WHITE, BLACK], t=args.t)

        target = original_image[113:, 113:].to(original_image)
        ours = generated_result[113:, 113:].to(original_image)

        fg_color = torch.tensor(fg_color, dtype=torch.float32, device=target.device)
        seg_orig = ((target - fg_color[None, None, :]) == 0).all(dim=2)
        seg_our = ((ours - fg_color[None, None, :]) == 0).all(dim=2)
        iou = torch.sum(seg_orig & seg_our).float() / torch.sum(seg_orig | seg_our).float()

        return iou
    
    def construct_indices(self, sampled_patches):
        
            
        if sampled_patches==[]:
            return None
        
        if args.granularity==1:
        
            indices = sampled_patches
            expanded_indices = []

            for element in indices:
                
                layer = element[0]
                head = element[1]
                quadrant = element[2]
                
                if quadrant == 0:
                    expanded_indices.append([layer, head, 0])
                elif quadrant == 1:
                    if layer<24:
                        for a in range(1, 50):
                            expanded_indices.append([layer,head, a])
                    else:
                        for a in q1:
                            expanded_indices.append([layer, head, a+1])
                elif quadrant == 2:
                    for a in q2:
                        expanded_indices.append([layer, head, a+1])
            indices = expanded_indices

            return indices
        
        if args.granularity==2:
            indices = sampled_patches
            expanded_indices = []

            for element in indices:
                
                layer = element[0]
                head = element[1]
                
                if head<24:
                    for a in range(50):
                        expanded_indices.append([layer,head, a])
                else:
                    for a in range(99):
                        expanded_indices.append([layer, head, a+1])
                
            indices = expanded_indices

            return indices
        
        if args.granularity==3:
            indices = sampled_patches
            expanded_indices = []

            for element in indices:
                
                layer = element[0]
                
                if layer<24:
                    for a in range(50):
                        for head in range(16):
                            expanded_indices.append([layer,head, a])
                else:
                    for a in range(99):
                        for head in range(16):
                            expanded_indices.append([layer, head, a])
                
            indices = expanded_indices

            return indices
    
    def train(self, args, num_itr):
        

        canvases = []
        for idx in range(len(self.train_ds)):
            if args.task is not None:
                canvas = self.train_ds[idx]['grid']
                canvas = (canvas - imagenet_mean[:, None, None]) / imagenet_std[:, None, None]

                canvases.append(canvas)
            else:
                canvas = self.train_ds[idx]['grid']
                for element in canvas:
                    element = (element - imagenet_mean[:, None, None]) / imagenet_std[:, None, None]
                    canvases.append(element)

        setup =  self.setup
        
        eval_iou = self.eval(args, setup)

        with open(os.path.join(args.output_dir,'log.txt'), 'a') as log:
            current_metric = {}
            current_metric["setup"] = setup
            current_metric["task"] = args.task
            current_metric["split"] = args.split
            current_metric["eval_loss"] = eval_iou

            log.write(str(current_metric) + '\n')
                
    def eval(self, args, setup):

        if args.task is None:
            curr_injection = self.task_tensor[0]
        else:
            curr_injection = self.task_tensor
        
        indices = self.construct_indices(self.bernoullis)
        
        loss_holder = []
        for idx in trange(len(self.eval_ds)):

            canvas = self.eval_ds[idx]['grid']
            canvas = (canvas - imagenet_mean[:, None, None]) / imagenet_std[:, None, None]

            with torch.no_grad():        
                if args.zero_shot:
                    indices_premask = []
                    indices_postmask = []

                    drop_indices = [1+a for a in calculate_quadrant_indices(14, 14, 1)]+[1+a for a in calculate_quadrant_indices(14, 14, 2)]
                    
                    indices_postmask += [1+a for a in calculate_quadrant_indices(14, 14, 3)] + [1+a for a in calculate_quadrant_indices(14, 14, 4)]
                    #indices_premask = list(range(0,148))#
                    indices_premask = [0]+list(range(99,148))

                    original_image, generated_result, _ = _generate_result_for_canvas(args, self.prompting_model, canvas, premask_pass_indices = indices_premask, attention_heads=indices, attention_injection=curr_injection, postmask_pass_indices = indices_postmask, drop_indices = drop_indices)

                    
                 
                else:
                    original_image, generated_result, _ = _generate_result_for_canvas(args, self.prompting_model, canvas, attention_heads=indices, attention_injection=curr_injection)

    
        
            image = generated_result.detach().cpu().numpy()
            plt.figure()
            plt.imshow(image)
            plt.axis('off')  # Turn off axis numbers and ticks
            image_save_dir = os.path.join(args.output_dir, 'rip')
            if not os.path.exists(image_save_dir):
                os.makedirs(image_save_dir)
            image_save_path = os.path.join(image_save_dir, f'{args.task}_{args.split}_{idx}_{setup}.png')
            plt.savefig(image_save_path, bbox_inches='tight', pad_inches=0)  # Save the image without padding and no axis
            plt.close()  # Close the plot to prevent it from displaying in the notebook or script output

            


            if setup == "MAE-VQGAN":
                image = original_image.detach().cpu().numpy()
                plt.figure()
                plt.imshow(image)
                plt.axis('off')  # Turn off axis numbers and ticks
                image_save_dir = os.path.join(args.output_dir, 'rip')
                if not os.path.exists(image_save_dir):
                    os.makedirs(image_save_dir)
                image_save_path = os.path.join(image_save_dir, f'{args.task}_{args.split}_{idx}_Ground Truth.png')
                plt.savefig(image_save_path, bbox_inches='tight', pad_inches=0)  # Save the image without padding and no axis
                plt.close()  # Close the plot to prevent it from displaying in the notebook or script output
                
            if args.task is None:
                #import pdb; breakpoint()
                loss = self.loss_iou(original_image, generated_result).item()
            elif args.task == 0:
                loss = self.loss_iou(original_image, generated_result).item()
            else:
                loss = self.loss_mse(original_image, generated_result)
            loss_holder.append(loss)



            with open(os.path.join(args.output_dir,'log-images.txt'), 'a') as log:
                current_metric = {}
                current_metric["file_name"] = f"{args.task}_{args.split}_{idx}_{setup}"
                current_metric["task"] = args.task
                current_metric["split"] = args.split
                current_metric["idx"] = idx
                current_metric["setup"] = setup
                current_metric["metric"] = loss

                log.write(str(current_metric) + '\n')
            

        eval_mean_iou = np.mean(loss_holder)

        return eval_mean_iou



import torch
from torchprofile import profile_macs

class GenerateImageModel(torch.nn.Module):
    def __init__(self, model, ids_shuffle, len_keep, device, premask_pass_indices, postmask_pass_indices, attention_heads, attention_injection, drop_indices):
        super(GenerateImageModel, self).__init__()
        # Store all necessary arguments for generate_image
        self.model = model
        self.ids_shuffle = ids_shuffle
        self.len_keep = len_keep
        self.device = device
        self.premask_pass_indices = premask_pass_indices
        self.postmask_pass_indices = postmask_pass_indices
        self.attention_heads = attention_heads
        self.attention_injection = attention_injection
        self.drop_indices = drop_indices
    
    def forward(self, canvas):
        # Call your generate_image function with stored arguments
        _, im_paste, _, latents = generate_image(
            canvas.unsqueeze(0).to(self.device), 
            self.model, 
            self.ids_shuffle.to(self.device),
            self.len_keep, 
            device=self.device,
            premask_pass_indices=self.premask_pass_indices, 
            postmask_pass_indices=self.postmask_pass_indices, 
            attention_heads=self.attention_heads, 
            attention_injection=self.attention_injection, 
            record=False, 
            drop_indices=self.drop_indices
        )
        return im_paste 
    


def _generate_result_for_canvas(args, model, canvas, premask_pass_indices = None, postmask_pass_indices = None, attention_heads=None, attention_injection=None, drop_indices = None):
    """canvas is already in the right range."""

    ids_shuffle, len_keep = generate_mask_for_evaluation()
    if attention_heads is not None:
        attention_heads = torch.tensor(attention_heads, dtype=torch.int64).to(args.device)

    #wrapped_model = GenerateImageModel(model, ids_shuffle, len_keep, args.device, premask_pass_indices, postmask_pass_indices, attention_heads, attention_injection, drop_indices).to(args.device)
    #flops = profile_macs(wrapped_model, canvas)
    #macs, params = profile(model, inputs=(input, ))
    #import pdb; breakpoint()

    _, im_paste, _, latents, loss = generate_image(canvas.unsqueeze(0).to(args.device), model, ids_shuffle.to(args.device),
                                    len_keep, device=args.device, premask_pass_indices = premask_pass_indices, postmask_pass_indices = postmask_pass_indices, attention_heads = attention_heads, attention_injection = attention_injection, record=False, drop_indices = drop_indices)

    canvas = torch.einsum('chw->hwc', canvas)
    canvas = torch.clip((canvas * imagenet_std + imagenet_mean) * 255, 0, 255).int()
    assert canvas.shape == im_paste.shape, (canvas.shape, im_paste.shape)
    return canvas, im_paste, latents

def evaluate(args):
    padding = 1
    image_transform = torchvision.transforms.Compose(
        [torchvision.transforms.Resize((224 // 2 - padding, 224 // 2 - padding), 3),
         torchvision.transforms.ToTensor()])
    mask_transform = [torchvision.transforms.Compose(
        [torchvision.transforms.Resize((224 // 2 - padding, 224 // 2 - padding), 3),
         torchvision.transforms.ToTensor()]), torchvision.transforms.Compose(
        [torchvision.transforms.Resize((224 // 2 - padding, 224 // 2 - padding), 3),
         torchvision.transforms.Grayscale(3),
         torchvision.transforms.ToTensor()])]

    for split in [0,1,2,3]:

        args.split = split

        ds = rl_dataloader.DatasetPASCAL(args.base_dir, fold=args.split, image_transform=image_transform, mask_transform=mask_transform,
                            flipped_order=args.flip, purple=args.purple, query_support_list_file=args.query_support_list_file, iters=args.train_images, type="trn", task=args.task)
        
        eval_ds = rl_dataloader.DatasetPASCAL(args.base_dir, fold=args.split, image_transform=image_transform, mask_transform=mask_transform,
                            flipped_order=args.flip, purple=args.purple, query_support_list_file=args.query_support_list_file, iters=args.eval_iters, type="val", task=args.task if not None else 0)
        
        model = prepare_model(args.ckpt, arch=args.model)
        _ = model.to(args.device)

        with open('/home/ahojel/visual_prompting_vid/task_vectors.pkl', 'rb') as f:
            injection_master = pickle.load(f)

        tasks = ["segmentation", "lowlight enhance", "segmentation_neutral", "inpaint single random", "colorization", "inpaint_ll", "inpaint_seg"]

        if args.task is not None:
            task = tasks[args.task]

            if args.task==5:
                enc_inj = torch.tensor(injection_master["encoder"]["lowlight enhance"]).to(args.device) + torch.tensor(injection_master["encoder"]["inpaint single random"]).to(args.device) - torch.tensor(injection_master["encoder"]["segmentation_neutral"]).to(args.device)
                dec_inj = torch.tensor(injection_master["decoder"]["lowlight enhance"]).to(args.device) + torch.tensor(injection_master["decoder"]["inpaint single random"]).to(args.device) - torch.tensor(injection_master["decoder"]["segmentation_neutral"]).to(args.device)
            elif args.task==6:
                enc_inj = torch.tensor(injection_master["encoder"]["segmentation"]).to(args.device) + torch.tensor(injection_master["encoder"]["inpaint single random"]).to(args.device) - torch.tensor(injection_master["encoder"]["segmentation_neutral"]).to(args.device)
                dec_inj = torch.tensor(injection_master["decoder"]["segmentation"]).to(args.device) + torch.tensor(injection_master["decoder"]["inpaint single random"]).to(args.device) - torch.tensor(injection_master["decoder"]["segmentation_neutral"]).to(args.device)
            else:
                enc_inj = torch.tensor(injection_master["encoder"][task]).to(args.device)
                dec_inj = torch.tensor(injection_master["decoder"][task]).to(args.device)
                    
            injection = [enc_inj,dec_inj]
        else:
            injection = []
            for task_element in tasks:
                enc_inj = torch.tensor(injection_master["encoder"][task_element]).to(args.device)
                dec_inj = torch.tensor(injection_master["decoder"][task_element]).to(args.device)
                injection.append([enc_inj,dec_inj])

        
        if args.granularity==0:
            params = 24*16+8*16
        elif args.granularity==1:
            params = 24*16*2+8*16*3
        elif args.granularity==2:
            params = 24*16*50+8*16*99
        else:
            params =1

        rl_model = JointModel(args, model, params, ds, eval_ds, injection, args.load_model)
        rl_model = rl_model.to(args.device)
        
        rl_model.train(args, num_itr=60)

def determine_quartile(z, q1, q2, q3, q4):
    """Determine the quartile group for a given z value."""
    holder = z
    z = z[-1]
    if holder[0]<=23:
        if z == 0:
            return 'q0'
        elif z-1 in q1:
            return 'q1'
        elif z-1 in q2:
            return 'q2'
        else:
            return 'q3'
    else:
        if z == 0:
            return 'q0'
        elif z-1 in q1:
            return 'q1'
        elif z-1 in q2:
            return 'q2'
        elif z-1 in q3:
            return 'q3'
        elif z-1 in q4:
            return 'q4'

def rank_coordinates_fine_grained(coord_value_pairs, q1, q2, q3, q4):
    # Unzip the list of pairs into separate lists
    coordinates, values = zip(*coord_value_pairs)
    
    # Group coordinates by (x, y) and then by quartile
    groups = defaultdict(lambda: defaultdict(list))
    for coord, value in zip(coordinates, values):
        xy_group = tuple(coord[:2])
        quartile = determine_quartile(coord, q1, q2, q3, q4)
        groups[xy_group][quartile].append((coord[2], value))
    
    # Calculate average value for each fine-grained group and sort groups by this average
    fine_grained_averages = {}
    for xy_group, quartiles in groups.items():
        for quartile, members in quartiles.items():
            avg = np.mean([value for _, value in members])
            fine_grained_averages[(xy_group, quartile)] = avg
    
    sorted_fine_grained_groups = sorted(fine_grained_averages.keys(), key=lambda x: fine_grained_averages[x], reverse=True)
    
    # Sort members within each fine-grained group by their z value
    for xy_group, quartiles in groups.items():
        for quartile in quartiles:
            quartiles[quartile] = sorted(quartiles[quartile], key=lambda x: x[0])
    
    # Compile the ranked list based on fine-grained group average and then by z within each group
    ranked_list = []
    for group in sorted_fine_grained_groups:
        xy_group, quartile = group
        for z, _ in groups[xy_group][quartile]:
            ranked_list.append([*xy_group, z])
    
    return ranked_list


def rank_coordinates_zipped(coord_value_pairs):
    # Unzip the list of pairs into separate lists
    coordinates, values = zip(*coord_value_pairs)
    
    # Group coordinates by (x, y)
    groups = defaultdict(list)
    for coord, value in zip(coordinates, values):
        groups[tuple(coord[:2])].append((coord[2], value))
    
    # Calculate average value for each group and sort groups by this average
    group_averages = {group: np.mean([value for _, value in members]) for group, members in groups.items()}
    sorted_groups = sorted(group_averages.keys(), key=lambda x: group_averages[x], reverse=True)
    
    # Sort members within each group by their z value
    for group in groups:
        groups[group] = sorted(groups[group], key=lambda x: x[0])
    
    # Compile the ranked list based on group average and then by z within each group
    ranked_list = []
    for group in sorted_groups:
        for z, _ in groups[group]:
            ranked_list.append([*group, z])
    
    return ranked_list

     

def evaluate_segmentation(original_image, generated_result, args):
    if args.purple:
        original_image = round_image(original_image, [YELLOW, PURPLE])
    else:
        original_image = round_image(original_image, [WHITE, BLACK])

    if args.purple:
        generated_result = round_image(generated_result, [YELLOW, PURPLE], t=args.t)
    else:
        generated_result = round_image(generated_result, [WHITE, BLACK], t=args.t)

    if args.purple:
        current_metric = calculate_metric(args, original_image, generated_result, fg_color=YELLOW, bg_color=PURPLE)
    else:
        current_metric = calculate_metric(args, original_image, generated_result, fg_color=WHITE, bg_color=BLACK)

    return current_metric
    
def evaluate_mse(target, ours):
    ours = (torch.permute(ours / 255., (2, 0, 1)) - torch.tensor(imagenet_mean, dtype=torch.float32).to(ours.device)[:, None, None]) / torch.tensor(imagenet_std, dtype=torch.float32).to(ours.device)[:, None, None]
    target = (torch.permute(target.to(ours.device) / 255., (2, 0, 1)) - torch.tensor(imagenet_mean, dtype=torch.float32).to(ours.device)[:, None, None]) / torch.tensor(imagenet_std, dtype=torch.float32).to(ours.device)[:, None, None]

    target = target[:, 113:, 113:]
    ours = ours[:, 113:, 113:]
    mse = torch.mean((target - ours) ** 2)
    return mse.item()

def calculate_quadrant_indices(rows, cols, quadrant):
    """
    Calculate the start and end indices for each quadrant in the flattened tensor.
    """
    row_start, row_end = 0, 7
    col_start, col_end = 0, 7
    
    if quadrant == 2:  # Top Right
        col_start, col_end = 7, 14
    elif quadrant == 3:  # Bottom Left
        row_start, row_end = 7, 14
    elif quadrant == 4:  # Bottom Right
        row_start, row_end = 7, 14
        col_start, col_end = 7, 14

    indices = []
    for row in range(row_start, row_end):
        for col in range(col_start, col_end):
            index = row * rows + col
            indices.append(index)
    
    return indices


q1 = calculate_quadrant_indices(14, 14, 1)
q2 = calculate_quadrant_indices(14, 14, 2)
q3 = calculate_quadrant_indices(14, 14, 3)
q4 = calculate_quadrant_indices(14, 14, 4)


if __name__ == '__main__':
    args = get_args()

    args = args.parse_args()
    seed = args.seed
    torch.manual_seed(seed)
    np.random.seed(seed)
    if args.output_dir:
        Path(args.output_dir).mkdir(parents=True, exist_ok=True)
    evaluate(args)



